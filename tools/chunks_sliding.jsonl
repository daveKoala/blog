{"title": "OSX Tree", "heading": "Introduction (sliding 1)", "chunk": "The `tree` command shows the folder structure of the current directory. Use the `-d` option to only show directories. The `-I` option lets you exclude certain directories. For example:\n\n```\ntree -I node_modules\n```\n\nTo exclude multiple directories, separate their names with |:\n\n```\ntree -I 'node_modules|cache|notes|test*'\n```\n\nThis will hide `node_modules`, cache, notes, and any directories starting with test from the output. `tree` is installed with brew\n\n```\nbrew install tree\n```", "tags": ["code"], "category": "", "path": "../_posts/2024-12-12-osx-tree.md"}
{"title": "Rules vrs Reality", "heading": "Why We Ignore Standards, and What to Do About It (sliding 1)", "chunk": "In nearly every software team, there\u2019s a list of rules, standards, or guidelines we\u2019re supposed to follow. - Coding standards. - Security checklists. - Documentation requirements. - CI/CD policies. But ask most developers \u2014 from juniors to seniors \u2014 and they\u2019ll admit that some of these are ignored, skipped, or worked around. Not because we\u2019re lazy or don\u2019t care, but because the real world doesn\u2019t always match what the rule assumes. So why does this happen? And what can we do to close the gap between the rules and the work? This essay explores that familiar, frustrating space between _what we say we do_ and _what we actually do_ \u2014 and how we can manage it better as developers, teams, and organizations. I\u2019ll draw on my training in Behavioural Science, my previous career managing high-risk environments, and my observations from the past 10 years working with both small teams and inside very large organizations.", "tags": ["Development"], "category": "", "path": "../_posts/2025-03-28-rules-vrs-reality.md"}
{"title": "Rules vrs Reality", "heading": "The Imaginary World of \u201cHow Things Should Be\u201d (sliding 1)", "chunk": "There\u2019s a useful concept from safety science called **\u201cWork-as-Imagined\u201d vs \u201cWork-as-Done.\u201d**\n\n- **Work-as-Imagined (WAI)** is how managers, process designers, or governance teams _think_ work should be done. It lives in documentation, flowcharts, and checklists. - **Work-as-Done (WAD)** is what actually happens on the ground \u2014 the improvisations, trade-offs, and shortcuts people use to get things done. Most problems happen in the gap between these two. For example, a company might define a strict process:\n\n- Every code change must go through peer review\n- Full test coverage\n- formal deployment checklist. But when you\u2019re fixing a production bug at 2 AM, that process can feel like a luxury \u2014 so you patch it directly and tell yourself you\u2019ll clean it up later. The bigger the gap between WAI and WAD, the more effort is spent on enforcement. Instead of improving the system, teams spend energy _policing_ behaviour, chasing compliance reports, or pretending to follow processes just to keep management happy.", "tags": ["Development"], "category": "", "path": "../_posts/2025-03-28-rules-vrs-reality.md"}
{"title": "Rules vrs Reality", "heading": "\u201cCompliance Theatre\u201d: When Appearance Replaces Substance (sliding 1)", "chunk": "This leads us to another term: **compliance theatre**. You\u2019ve seen it before. It\u2019s when a team or organization goes through the motions of following rules without actually doing anything useful. - Writing fake unit tests to satisfy a 100% coverage policy. - Copy-pasting comments just to tick the \u201cdocumented\u201d box. - Filling out forms no one reads, just to pass a governance check. The appearance of compliance becomes more important than real quality, safety, or learning. It\u2019s a charade \u2014 and most developers know it. But it\u2019s not just a software thing. The term originally gained traction in info-security and corporate governance. A company might pass a security audit by showing paperwork \u2014 while leaving critical vulnerabilities unpatched. One recent case involved a government contractor paying $11 million for falsely claiming compliance with cybersecurity standards \u2014 a textbook case of compliance theatre in action.", "tags": ["Development"], "category": "", "path": "../_posts/2025-03-28-rules-vrs-reality.md"}
{"title": "Rules vrs Reality", "heading": "\u201cNormalization of Deviance\u201d: When Bending the Rules Becomes the Norm (sliding 1)", "chunk": "Another concept that helps explain this behaviors is **normalization of deviance**, coined by sociologist Diane Vaughan after studying the Challenger space shuttle disaster. The idea is simple: when you break a rule and nothing bad happens, you\u2019re more likely to break it again. Over time, these \u201cexceptions\u201d become accepted. People forget the original reason for the rule, and the risky behaviour becomes the new normal. In dev teams, this happens all the time:\n\n- Skipping code reviews when under pressure. - Pushing directly to main \u201cjust this once.\u201d\n- Merging code without resolving TODOs because the release is due. Eventually, the team stops seeing these as exceptions. They become routine \u2014 until something breaks.", "tags": ["Development"], "category": "", "path": "../_posts/2025-03-28-rules-vrs-reality.md"}
{"title": "Rules vrs Reality", "heading": "Why We Bend or Break the Rules (sliding 1)", "chunk": "Let\u2019s dig deeper into the _why_. Here are the most common reasons teams ignore or work around formal standards:", "tags": ["Development"], "category": "", "path": "../_posts/2025-03-28-rules-vrs-reality.md"}
{"title": "Rules vrs Reality", "heading": "1. Time Pressure (sliding 1)", "chunk": "Deadlines, production bugs, stakeholder expectations \u2014 time pressure is one of the biggest drivers. When things get tight, optional steps get skipped. Often, this pressure isn\u2019t even explicit \u2014 teams just feel it, and cut corners preemptively.", "tags": ["Development"], "category": "", "path": "../_posts/2025-03-28-rules-vrs-reality.md"}
{"title": "Rules vrs Reality", "heading": "2. Overly Complex or Unusable Rules (sliding 1)", "chunk": "If a coding standard or deployment process is too long, unclear, or painful, people will avoid it. Developers are good at finding the path of least resistance \u2014 especially if the rule feels disconnected from actual outcomes.", "tags": ["Development"], "category": "", "path": "../_posts/2025-03-28-rules-vrs-reality.md"}
{"title": "Rules vrs Reality", "heading": "3. Rules Written Without Developers in Mind (sliding 1)", "chunk": "Sometimes standards are made by governance teams, security folks, or architects far removed from daily work. If the process assumes ideal conditions (e.g., time, resources, full knowledge), it may clash with the messy, real-world scenarios developers face.", "tags": ["Development"], "category": "", "path": "../_posts/2025-03-28-rules-vrs-reality.md"}
{"title": "Rules vrs Reality", "heading": "4. Low Perceived Value (sliding 1)", "chunk": "If a rule feels like \u201cjust paperwork,\u201d developers will do the bare minimum to comply \u2014 or quietly ignore it. This is especially true when rules are framed as obligations, not opportunities to improve quality or safety.", "tags": ["Development"], "category": "", "path": "../_posts/2025-03-28-rules-vrs-reality.md"}
{"title": "Rules vrs Reality", "heading": "5. Bad Tools and Friction (sliding 1)", "chunk": "If following the rule slows you down \u2014 like a security scanner that takes 30 minutes or a CI gate that blocks for false positives \u2014 you\u2019ll find ways around it. Tools should support compliance, not make it harder.", "tags": ["Development"], "category": "", "path": "../_posts/2025-03-28-rules-vrs-reality.md"}
{"title": "Rules vrs Reality", "heading": "6. Cultural Signals (sliding 1)", "chunk": "If leadership breaks the rules when convenient (e.g., asking for an urgent fix without tests), that behaviours becomes normalized. Similarly, if teams are praised only for shipping, not for quality or sustainability, rules get de-prioritized.", "tags": ["Development"], "category": "", "path": "../_posts/2025-03-28-rules-vrs-reality.md"}
{"title": "Rules vrs Reality", "heading": "7. Shadow Processes and \u201cDesire Paths\u201d (sliding 1)", "chunk": "When the official way is too slow or clunky, teams create workarounds \u2014 like \u201cfast-track\u201d deploys or Slack-based approvals. These informal routes are the equivalent of desire paths: the dirt trails people make by ignoring the paved walkway.", "tags": ["Development"], "category": "", "path": "../_posts/2025-03-28-rules-vrs-reality.md"}
{"title": "Rules vrs Reality", "heading": "How Organizations Typically Respond (sliding 1)", "chunk": "Most companies respond to non-compliance in one of three ways:", "tags": ["Development"], "category": "", "path": "../_posts/2025-03-28-rules-vrs-reality.md"}
{"title": "Rules vrs Reality", "heading": "1. Crack Down and Police It (sliding 1)", "chunk": "They introduce more controls, more forms, more checklists. Maybe even a dedicated \u201ccompliance officer.\u201d But this often backfires \u2014 increasing the WAI\u2013WAD gap, generating resentment, or pushing workarounds underground.", "tags": ["Development"], "category": "", "path": "../_posts/2025-03-28-rules-vrs-reality.md"}
{"title": "Rules vrs Reality", "heading": "2. Fake It Till You Pass the Audit (sliding 1)", "chunk": "This leads to compliance theatre \u2014 where teams tick boxes, forge paperwork, or auto-generate documentation just to keep the auditors off their backs.", "tags": ["Development"], "category": "", "path": "../_posts/2025-03-28-rules-vrs-reality.md"}
{"title": "Rules vrs Reality", "heading": "3. Bridge the Gap (sliding 1)", "chunk": "The best organizations take a different approach: they study where the gaps are, understand why people deviate, and either adjust the rules or improve the workflow. **They treat non-compliance as a _signal_, not a failure. **", "tags": ["Development"], "category": "", "path": "../_posts/2025-03-28-rules-vrs-reality.md"}
{"title": "Rules vrs Reality", "heading": "1. Make the Right Thing the Easy Thing (sliding 1)", "chunk": "Good DevOps and DevSecOps practice does this well. Want developers to write secure code? Give them secure-by-default libraries and clear linters. Want tests? Automate them into the pipeline. Compliance shouldn\u2019t be a separate chore \u2014 it should be embedded into the workflow.", "tags": ["Development"], "category": "", "path": "../_posts/2025-03-28-rules-vrs-reality.md"}
{"title": "Rules vrs Reality", "heading": "2. Listen to the Work-as-Done (sliding 1)", "chunk": "Observe how people _actually_ work \u2014 not how you think they work. Do retros, run process audits, talk to teams. Ask questions like:\n\n- Why do we skip this step? - What\u2019s slowing us down? - What would make this easier? This can reveal pain points, inefficiencies, and outdated rules that need revising.", "tags": ["Development"], "category": "", "path": "../_posts/2025-03-28-rules-vrs-reality.md"}
{"title": "Rules vrs Reality", "heading": "3. Refactor Your Processes Like You Refactor Code (sliding 1)", "chunk": "Just like code, processes need maintenance. If a rule doesn\u2019t serve a purpose, cut it. If it\u2019s too painful, improve it. Treat processes as living things, not sacred doctrine.", "tags": ["Development"], "category": "", "path": "../_posts/2025-03-28-rules-vrs-reality.md"}
{"title": "Rules vrs Reality", "heading": "4. Prioritize Psychological Safety (sliding 1)", "chunk": "If people are afraid to admit they took a shortcut or broke a rule, they\u2019ll lie or hide problems. But if your culture encourages honesty and learning, teams can raise issues early \u2014 and you can fix systemic problems before they cause harm.", "tags": ["Development"], "category": "", "path": "../_posts/2025-03-28-rules-vrs-reality.md"}
{"title": "Rules vrs Reality", "heading": "5. Lead by Example (sliding 1)", "chunk": "If leadership models good behaviour \u2014 following the process even under pressure, respecting downtime, prioritizing learning \u2014 teams will follow. But if leaders bypass rules or reward only short-term delivery, the message is clear: \u201crules don\u2019t matter.\u201d", "tags": ["Development"], "category": "", "path": "../_posts/2025-03-28-rules-vrs-reality.md"}
{"title": "Rules vrs Reality", "heading": "6. Explain the \u201cWhy\u201d (sliding 1)", "chunk": "People are more likely to follow a rule if they understand its purpose. For example, if you show that a secure coding standard prevented a breach last year, teams are more likely to respect it. - Don\u2019t just say _\u201cdo this because compliance says so.\u201d_\n\n- Say _\u201cdo this because here\u2019s what happens if you don\u2019t.\u201d_", "tags": ["Development"], "category": "", "path": "../_posts/2025-03-28-rules-vrs-reality.md"}
{"title": "Rules vrs Reality", "heading": "Real Example: Paving the Desire Path (sliding 1)", "chunk": "Some organizations have adopted a clever approach inspired by _desire paths_. Instead of designing the perfect process upfront, they wait to see how people naturally work \u2014 and then pave over the dirt trail. In software terms, this might mean:\n\n- Watching how teams handle hotfixes \u2014 and then formalizing a lightweight emergency deploy process. - Seeing which parts of a checklist are always skipped \u2014 and questioning whether they\u2019re useful. - Capturing unofficial best practices and turning them into real documentation. The result? Processes that people actually use, because they reflect reality.", "tags": ["Development"], "category": "", "path": "../_posts/2025-03-28-rules-vrs-reality.md"}
{"title": "Rules vrs Reality", "heading": "Closing the Gap: A Developer's Playbook (sliding 1)", "chunk": "Whether you\u2019re a dev, tech lead, or manager, here\u2019s a practical playbook to help reduce the gap between rules and reality:\n\n| What You Can Do                   | Why It Helps                                              |\n| --------------------------------- | --------------------------------------------------------- |\n| Ask _why_ a rule exists           | Builds understanding and can surface outdated rules       |\n| Raise pain points in retros       | Helps teams refine their own processes                    |\n| Suggest better defaults/tools     | Makes compliance easier and more automatic                |\n| Document the \u201creal\u201d process       | Makes informal practices visible and shareable            |\n| Call out compliance theatre       | Prevents box-ticking and opens discussion for improvement |\n| Respect rules \u2014 or challenge them | Improves ownership and encourages critical thinking       |\n| Foster safety to admit shortcuts  | Encourages honesty and system-level improvements          |", "tags": ["Development"], "category": "", "path": "../_posts/2025-03-28-rules-vrs-reality.md"}
{"title": "Rules vrs Reality", "heading": "Final Thoughts (sliding 1)", "chunk": "There will always be a tension between what we _intend_ to do and what actually happens. In software, where conditions change rapidly, it\u2019s unreasonable to expect perfect rule-following. But it\u2019s also dangerous to let standards slide into irrelevance. Instead of pretending the gap doesn\u2019t exist \u2014 or punishing people for crossing it \u2014 smart teams use that gap as a feedback loop. They study the differences, learn from them, and evolve both their processes and their culture. As developers, we owe it to ourselves and our users to do more than follow rules blindly \u2014 or break them silently. We need to be active participants in shaping rules that work. That means asking hard questions, improving what\u2019s broken, and holding each other to a high standard \u2014 not just of _compliance_, but of _craft_.", "tags": ["Development"], "category": "", "path": "../_posts/2025-03-28-rules-vrs-reality.md"}
{"title": "Rules vrs Reality", "heading": "References (sliding 1)", "chunk": "1. Hollnagel, E. (2012). _FRAM: The Functional Resonance Analysis Method_. CRC Press. 2. Dekker, S. (2014). _The Field Guide to Understanding 'Human Error'_. Ashgate. 3. Vaughan, D. (1996). _The Challenger Launch Decision: Risky Technology, Culture, and Deviance at NASA_. University of Chicago Press. 4. Meyer, J. W., & Rowan, B. (1977). Institutionalized Organizations: Formal Structure as Myth and Ceremony. _American Journal of Sociology_, 83(2), 340\u2013363. 5. Sandholtz, K. W. (2012). Making Standards Stick: A Theory of Coupled vs. Decoupled Compliance. _Organization Studies_, 33(5-6), 655\u2013679. [journals.sagepub.com](https://journals.sagepub.com/doi/10.1177/0170840612443623?icid=int.sj-abstract.citing-articles.41#:~:text=corporation%20sought%20to%20standardize%20their,how%20three%20common%20modes%20of)\n6. Willis, J. (2020). Security and Compliance Theater \u2013 The Seventh Deadly Disease of DevOps.", "tags": ["Development"], "category": "", "path": "../_posts/2025-03-28-rules-vrs-reality.md"}
{"title": "Rules vrs Reality", "heading": "References (sliding 2)", "chunk": "University of Chicago Press. 4. Meyer, J. W., & Rowan, B. (1977). Institutionalized Organizations: Formal Structure as Myth and Ceremony. _American Journal of Sociology_, 83(2), 340\u2013363. 5. Sandholtz, K. W. (2012). Making Standards Stick: A Theory of Coupled vs. Decoupled Compliance. _Organization Studies_, 33(5-6), 655\u2013679. [journals.sagepub.com](https://journals.sagepub.com/doi/10.1177/0170840612443623?icid=int.sj-abstract.citing-articles.41#:~:text=corporation%20sought%20to%20standardize%20their,how%20three%20common%20modes%20of)\n6. Willis, J. (2020). Security and Compliance Theater \u2013 The Seventh Deadly Disease of DevOps. [Talk Transcript](https://itrevolution.com/articles/devops-and-the-seven-deadly-diseases/). 7. Finkle, M. (2024). Work-As-Imagined vs. Work-As-Done in DevOps.", "tags": ["Development"], "category": "", "path": "../_posts/2025-03-28-rules-vrs-reality.md"}
{"title": "Rules vrs Reality", "heading": "References (sliding 3)", "chunk": "Decoupled Compliance. _Organization Studies_, 33(5-6), 655\u2013679. [journals.sagepub.com](https://journals.sagepub.com/doi/10.1177/0170840612443623?icid=int.sj-abstract.citing-articles.41#:~:text=corporation%20sought%20to%20standardize%20their,how%20three%20common%20modes%20of)\n6. Willis, J. (2020). Security and Compliance Theater \u2013 The Seventh Deadly Disease of DevOps. [Talk Transcript](https://itrevolution.com/articles/devops-and-the-seven-deadly-diseases/). 7. Finkle, M. (2024). Work-As-Imagined vs. Work-As-Done in DevOps. [Stark Raving Finkle Blog](https://starkravingfinkle.org/blog/2024/04/work-as-imagined-vs-work-as-done/#:~:text=There%20are%20whole%20industries%20and,accidents%20can%20have%20horrible%20consequences). 8. Noda, K. (2023). Time Pressure in Software Development. [Research Summary](https://newsletter.getdx.com/p/time-pressure-in-software-development). 9. U.S. Department of Justice. (2023).", "tags": ["Development"], "category": "", "path": "../_posts/2025-03-28-rules-vrs-reality.md"}
{"title": "Rules vrs Reality", "heading": "References (sliding 4)", "chunk": "Willis, J. (2020). Security and Compliance Theater \u2013 The Seventh Deadly Disease of DevOps. [Talk Transcript](https://itrevolution.com/articles/devops-and-the-seven-deadly-diseases/). 7. Finkle, M. (2024). Work-As-Imagined vs. Work-As-Done in DevOps. [Stark Raving Finkle Blog](https://starkravingfinkle.org/blog/2024/04/work-as-imagined-vs-work-as-done/#:~:text=There%20are%20whole%20industries%20and,accidents%20can%20have%20horrible%20consequences). 8. Noda, K. (2023). Time Pressure in Software Development. [Research Summary](https://newsletter.getdx.com/p/time-pressure-in-software-development). 9. U.S. Department of Justice. (2023). Government Contractor to Pay $11.2 Million Over False Cybersecurity Claims. [justice.gov](https://www.justice.gov/opa/pr/). 10. Gartner (via Wiz). (2024). The Rise of Shadow IT: Trends and Strategies for IT Governance. [wiz.io](https://www.wiz.io/blog/). 11. David Embrey (2024).", "tags": ["Development"], "category": "", "path": "../_posts/2025-03-28-rules-vrs-reality.md"}
{"title": "Rules vrs Reality", "heading": "References (sliding 5)", "chunk": "8. Noda, K. (2023). Time Pressure in Software Development. [Research Summary](https://newsletter.getdx.com/p/time-pressure-in-software-development). 9. U.S. Department of Justice. (2023). Government Contractor to Pay $11.2 Million Over False Cybersecurity Claims. [justice.gov](https://www.justice.gov/opa/pr/). 10. Gartner (via Wiz). (2024). The Rise of Shadow IT: Trends and Strategies for IT Governance. [wiz.io](https://www.wiz.io/blog/). 11. David Embrey (2024). Tackling Procedural Non-Compliance in the Workplace: Insights and Solutions[www.humanreliability.com](https://www.humanreliability.com/2024/11/tackling-procedural-non-compliance-in-the-workplace/#:~:text=1)\n12. David Rodenas (2023). Confirmed: Code Coverage Is a Useless Management Metric [medium.com](https://medium.com/better-programming/confirmed-code-coverage-is-a-useless-management-metric-35afa05e8549#:~:text=Confirmed%3A%20Code%20Coverage%20Is%20a,to%20achieve%20higher%20code)\n13. (2024). What Is Shadow IT?", "tags": ["Development"], "category": "", "path": "../_posts/2025-03-28-rules-vrs-reality.md"}
{"title": "Rules vrs Reality", "heading": "References (sliding 6)", "chunk": "10. Gartner (via Wiz). (2024). The Rise of Shadow IT: Trends and Strategies for IT Governance. [wiz.io](https://www.wiz.io/blog/). 11. David Embrey (2024). Tackling Procedural Non-Compliance in the Workplace: Insights and Solutions[www.humanreliability.com](https://www.humanreliability.com/2024/11/tackling-procedural-non-compliance-in-the-workplace/#:~:text=1)\n12. David Rodenas (2023). Confirmed: Code Coverage Is a Useless Management Metric [medium.com](https://medium.com/better-programming/confirmed-code-coverage-is-a-useless-management-metric-35afa05e8549#:~:text=Confirmed%3A%20Code%20Coverage%20Is%20a,to%20achieve%20higher%20code)\n13. (2024). What Is Shadow IT? Causes, Risks, and Examples\n [www.wiz.io](https://www.wiz.io/academy/shadow-it)\n14. Wikipedia. Decoupling (organizational studies) [en.wikipedia.org](<https://en.wikipedia.org/wiki/Decoupling_(organizational_studies)#:~:text=1.%20,01%29.%20%2046%20%22From%20Smoke>)\n15.", "tags": ["Development"], "category": "", "path": "../_posts/2025-03-28-rules-vrs-reality.md"}
{"title": "Rules vrs Reality", "heading": "References (sliding 7)", "chunk": "David Rodenas (2023). Confirmed: Code Coverage Is a Useless Management Metric [medium.com](https://medium.com/better-programming/confirmed-code-coverage-is-a-useless-management-metric-35afa05e8549#:~:text=Confirmed%3A%20Code%20Coverage%20Is%20a,to%20achieve%20higher%20code)\n13. (2024). What Is Shadow IT? Causes, Risks, and Examples\n [www.wiz.io](https://www.wiz.io/academy/shadow-it)\n14. Wikipedia. Decoupling (organizational studies) [en.wikipedia.org](<https://en.wikipedia.org/wiki/Decoupling_(organizational_studies)#:~:text=1.%20,01%29.%20%2046%20%22From%20Smoke>)\n15. (2025) The Cost of Compliance Theater: DoD Contractor Pays $11.2M for False Cybersecurity Certifications [www.centraleyes.com](https://www.centraleyes.com/the-cost-of-compliance-theater-dod-contractor-pays-11-2m-for-false-cybersecurity-certifications/#:~:text=The%20implications%20extend%20beyond%20HNFS,actually%20implementing%20security%E2%80%94has%20real%20consequences)", "tags": ["Development"], "category": "", "path": "../_posts/2025-03-28-rules-vrs-reality.md"}
{"title": "Assertions vs Validation", "heading": "TL:DR Key Differences (sliding 1)", "chunk": "- Validation = guard for real-world use (e.g., from user input). - Assertion = internal assumption (\"this should never happen\"). \ud83d\udc49 Assertions can be stripped out in production code, whereas validation usually stays.", "tags": ["Development"], "category": "", "path": "../_posts/2025-03-28-assertions-vs-validation.md"}
{"title": "Assertions vs Validation", "heading": "An assertion is a programming sanity check: (sliding 1)", "chunk": "It\u2019s a way to say, \u201cI assert this must be true\u2014if it\u2019s not, something\u2019s wrong.\u201d\n\nIn JavaScript, we often use assertions during development or testing to catch bugs early by checking that assumptions in the code hold true.", "tags": ["Development"], "category": "", "path": "../_posts/2025-03-28-assertions-vs-validation.md"}
{"title": "Assertions vs Validation", "heading": "Why Use Assertions? (sliding 1)", "chunk": "- They help you fail fast when something goes wrong. - They protect against unexpected inputs or states. - They act as self-documenting code. - They reduce the risk of hard-to-find bugs later.", "tags": ["Development"], "category": "", "path": "../_posts/2025-03-28-assertions-vs-validation.md"}
{"title": "Assertions vs Validation", "heading": "Without assertions (sliding 1)", "chunk": "```javascript\nfunction divide(a, b) {\n  return a / b; // Uh-oh... what if b is 0?\n} console.log(divide(10, 0)); // Infinity, no error! ```", "tags": ["Development"], "category": "", "path": "../_posts/2025-03-28-assertions-vs-validation.md"}
{"title": "Assertions vs Validation", "heading": "Add an Assertion (sliding 1)", "chunk": "```typescript\nfunction assert(condition, message) {\n  if (!condition) {\n    throw new Error(message || \"Assertion failed\");\n  }\n}\n\nfunction divide(a, b) {\n  assert(b !== 0, \"Divider 'b' must not be zero\");\n  return a / b;\n}\n\nconsole.log(divide(10, 0)); // \u274c Throws: \"Divider 'b' must not be zero\"\n```\n\nThis immediately stops execution with a clear error, rather than letting weird behavior (like Infinity) happen silently.", "tags": ["Development"], "category": "", "path": "../_posts/2025-03-28-assertions-vs-validation.md"}
{"title": "Assertions vs Validation", "heading": "Where to Use Assertions (sliding 1)", "chunk": "**Check function inputs:**\n\n```javascript\nfunction greet(name) {\n  assert(typeof name === \"string\", \"Name must be a string\");\n  console.log(`Hello, ${name}`);\n}\n```\n\n**Validate internal state:**\n\n```javascript\nfunction process(data) {\n  assert(data !== null && typeof data === \"object\", \"Invalid data\");\n  // do stuff\n}\n```\n\n**Unit tests (using testing libraries like Chai or Node\u2019s assert module):**\n\n```javascript\nconst assert = require(\"assert\");\nassert.strictEqual(add(2, 2), 4); // \u2705 passes\nassert.strictEqual(add(2, 2), 5); // \u274c fails\n```\n\nThere are libraries out there that can help or if you want you can write tool/class yourself its not difficult for straight forward assertions", "tags": ["Development"], "category": "", "path": "../_posts/2025-03-28-assertions-vs-validation.md"}
{"title": "Assertions vs Validation", "heading": "So where does Typescript types/interfaces etc come into it? (sliding 1)", "chunk": "TypeScript types and interfaces help you catch bugs before runtime, during development and compilation. Think of it as:\n\n- TypeScript = compile-time protection\n- Assertions = runtime protection\n\nThey serve different purposes, but work beautifully together.", "tags": ["Development"], "category": "", "path": "../_posts/2025-03-28-assertions-vs-validation.md"}
{"title": "Enhancing Focus with Thematic Sprints in Our Dynamic Development Team", "heading": "Introduction (sliding 1)", "chunk": "In the fast-paced world of software development, maintaining focus is paramount. Our agile team\u2014typically ranging from four to six members\u2014has discovered that naming our sprints after specific themes or goals not only enhances productivity but also drives deeper engagement. When our team operates at a smaller scale, we benefit from active involvement during planning, resulting in clear, focused outputs. However, as projects grow and stories become more complex, it's easy to lose sight of our objectives. By introducing clear, thematic sprint names, we create a shared understanding that helps steer our efforts and keep everyone aligned. This practice has become a cornerstone of our daily stand-up meetings, where we consistently reference the current sprint theme. Doing so reinforces our commitment, encourages a sense of ownership among developers, and keeps our goals front and center. Moreover, thematic sprints naturally foster collaboration. With a dedicated focus, team discussions evolve into creative problem-solving sessions, yielding innovative solutions and richer features. For example, when we dedicated a sprint solely to user experience improvements, our team became significantly more receptive to feedback, resulting in noticeably enhanced designs. In conclusion, thematic sprints have transformed our development process by enhancing focus, boosting creativity, and nurturing a culture of collaboration and innovation. While no single approach fits every team, our experience shows that aligning work around a clear theme can lead to measurable improvements\u2014even as teams and projects evolve.", "tags": ["Development"], "category": "", "path": "../_posts/2024-04-12-enhancing-focus-with-thematic-sprints-in-our-dynamic-development-team.md"}
{"title": "Post: Quote", "heading": "Introduction (sliding 1)", "chunk": "> Only one thing is impossible for God: To find any sense in any copyright law on the planet. > <cite><a href=\"http://www.brainyquote.com/quotes/quotes/m/marktwain163473.html\">Mark Twain</a></cite>", "tags": ["Post Formats", "quote"], "category": "", "path": "../_posts/__2010-02-05-post-quote.md"}
{"title": "Replacing ObjectId with a String in JSON Using Regex", "heading": "Problem (sliding 1)", "chunk": "When working with MongoDB data dumps in JSON format, ObjectIDs are represented as:\n\n```json\n\"_id\" : ObjectId(\"5e3b1890e032d225a091d43f\"),\n\"userId\" : ObjectId(\"65ed1c2c-922c-4c82-b5bc-7324f69eea10\"),\n```\n\nHowever, for many use cases you need these values to be plain strings:\n\n```json\n\"_id\" : \"5e3b1890e032d225a091d43f\",\n\"userId\" : \"65ed1c2c-922c-4c82-b5bc-7324f69eea10\",\n```", "tags": ["visual studio code", "regex"], "category": "", "path": "../_posts/2023-02-23-replacing-objectid-with-a-string.md"}
{"title": "Replacing ObjectId with a String in JSON Using Regex", "heading": "Approach (sliding 1)", "chunk": "We can achieve this using Visual Studio Code\u2019s Find and Replace with Regular Expressions. **Step 1: Open Find and Replace**\n\n- Press Ctrl+F (or Cmd+F on macOS) to open the search. - Click the .\\* icon to enable regex search. **Step 2: Configure the Regex**\n\nFind Pattern:\n\n```regex\nObjectId\\(\"([0-9a-fA-F]{24})\"\\)\n```\n\nThis pattern captures the 24 hexadecimal characters within ObjectId(\"...\"). Replace With:\n\n```plaintext\n\"$1\"\n```\n\nThe replacement uses the captured group ($1) to output just the string inside the ObjectId.", "tags": ["visual studio code", "regex"], "category": "", "path": "../_posts/2023-02-23-replacing-objectid-with-a-string.md"}
{"title": "Replacing ObjectId with a String in JSON Using Regex", "heading": "Example Transformation (sliding 1)", "chunk": "```:javascript\n\"_id\" : ObjectId(\"5e3b1890e032d225a091d43f\"),\n\"userId\" : ObjectId(\"65ed1c2c-922c-4c82-b5bc-7324f69eea10\"),\n```", "tags": ["visual studio code", "regex"], "category": "", "path": "../_posts/2023-02-23-replacing-objectid-with-a-string.md"}
{"title": "Replacing ObjectId with a String in JSON Using Regex", "heading": "Bonus: Replacing ISODate (sliding 1)", "chunk": "If you also need to replace `ISODate(\"...\")` with a plain string, use this pattern:\n\nFind Pattern:\n\n```regex\nISODate\\(\"([^\"]+)\"\\)\n```\n\nReplace With:\n\n```plaintext\n\"$1\"\n```\n\nThis captures the date string inside ISODate and replaces the whole expression with just that string.", "tags": ["visual studio code", "regex"], "category": "", "path": "../_posts/2023-02-23-replacing-objectid-with-a-string.md"}
{"title": "RAG at Scale is Hard: Are Startups Getting It Wrong?", "heading": "Introduction (sliding 1)", "chunk": "Draft! There\u2019s a pattern I\u2019ve seen in the past few months. Startups\u2014and especially non-technical product owners\u2014have heard about RAG (Retrieval-Augmented Generation), seen a demo, maybe run a small pilot\u2026 and now they want to roll it out to production. The idea sounds simple enough:\n\n\u201cLet clients upload their data and get meaningful answers from a friendly AI assistant.\u201d\n\nBut the truth is: **very few developers have implemented RAG in real life, beyond a toy example or carefully curated demo. ** Even in large organizations with AI teams and infrastructure, RAG rarely makes it into production at scale. I\u2019ve worked for a multinational with 200+ developers on a AI project. And this month alone, I\u2019ve had two interviews where I was asked to lead a team building a production RAG MVP. Both had run a \u201cpilot\u201d with a customer. Both had no real plan for what \u201cproduction\u201d meant.", "tags": ["Development", "AI"], "category": "", "path": "../_posts/2025-04-07-rag-at-scale-is-hard-what-startups-get-wrong.md"}
{"title": "RAG at Scale is Hard: Are Startups Getting It Wrong?", "heading": "The Myth of Plug-and-Play RAG (sliding 1)", "chunk": "There\u2019s a belief floating around that RAG is nearly turnkey. You embed the documents, drop them in a vector database, throw a GPT prompt at the search results\u2014and boom! Magic AI chatbot. What actually happens:\n\n- Clients upload PDFs, Word docs, screenshots, spreadsheets, and the occasional photograph of a whiteboard\n\n- Data is inconsistent, contradictory, poorly formatted, and often outdated\n\n- The AI gives long-winded, vague, or hallucinated answers\n\n- Users don\u2019t trust it, so they don\u2019t use it\n\n- No monitoring, no feedback, no versioning, no context on why an answer was given\n\nAt that point, everyone quietly moves on and the pilot becomes another bullet point on the investor slide deck.", "tags": ["Development", "AI"], "category": "", "path": "../_posts/2025-04-07-rag-at-scale-is-hard-what-startups-get-wrong.md"}
{"title": "RAG at Scale is Hard: Are Startups Getting It Wrong?", "heading": "Why RAG Instead of Fine-Tuning? (sliding 1)", "chunk": "One common question is: \u201cWhy not just fine-tune the LLM on our own company\u2019s data?\u201d\nThe answer is that **fine-tuning is rarely the right approach for general knowledge retrieval. ** When you fine-tune a large model, your specific data gets blended into the ocean of its existing knowledge. Unless you have massive, high-quality, and domain-specific training data, your information is likely to be diluted\u2014leading to less accurate responses and more hallucinations, not fewer. Fine-tuned models also lack transparency: it\u2019s much harder to know where an answer came from, or whether it's grounded in your latest documents. **RAG keeps your company\u2019s data separate and fresh,** enabling the model to retrieve relevant content in real-time and generate answers with context and citations\u2014without rewriting the model\u2019s brain every time your business updates a policy.", "tags": ["Development", "AI"], "category": "", "path": "../_posts/2025-04-07-rag-at-scale-is-hard-what-startups-get-wrong.md"}
{"title": "RAG at Scale is Hard: Are Startups Getting It Wrong?", "heading": "Are Startups Getting It Wrong? (sliding 1)", "chunk": "Here\u2019s the core misunderstanding:\n**RAG isn\u2019t a feature \u2014 it\u2019s a platform. **\nAnd building a platform means infrastructure, process, and ongoing care. Let\u2019s break it down.", "tags": ["Development", "AI"], "category": "", "path": "../_posts/2025-04-07-rag-at-scale-is-hard-what-startups-get-wrong.md"}
{"title": "RAG at Scale is Hard: Are Startups Getting It Wrong?", "heading": "1. Uploading Arbitrary Data Is a Nightmare (sliding 1)", "chunk": "You can\u2019t just let users upload anything and expect good results. Different file types, structures, writing styles, and document lengths need different parsing, chunking, and embedding strategies. A 10-page policy doc is nothing like a customer support log. A spreadsheet full of KPIs isn\u2019t a knowledge base. And when it goes wrong? You can\u2019t always tell why. The AI doesn\u2019t complain\u2014it just gives a poor answer.", "tags": ["Development", "AI"], "category": "", "path": "../_posts/2025-04-07-rag-at-scale-is-hard-what-startups-get-wrong.md"}
{"title": "RAG at Scale is Hard: Are Startups Getting It Wrong?", "heading": "2. Retrieval Quality Is Everything (sliding 1)", "chunk": "The whole premise of RAG depends on the system retrieving the right data. If retrieval is noisy, off-topic, or inconsistent, the generated answer won\u2019t help anyone. This means:\n\n- Fine-tuning chunk size and overlap\n\n- Testing different embedding models\n\n- Handling synonyms, acronyms, and fuzzy queries\n\n- Sometimes rewriting or augmenting the user\u2019s question\n\nAnd you\u2019ll need a way to measure it. _\"Feels about right\"_ won\u2019t cut it when clients start using it in their workflows.", "tags": ["Development", "AI"], "category": "", "path": "../_posts/2025-04-07-rag-at-scale-is-hard-what-startups-get-wrong.md"}
{"title": "RAG at Scale is Hard: Are Startups Getting It Wrong?", "heading": "3. Prompt Engineering Isn\u2019t a One-Time Job (sliding 1)", "chunk": "It\u2019s easy to get a good answer in your first few tests. You\u2019ve curated the data. You\u2019ve crafted the prompt. You ask a softball question. In production? - Users ask vague or oddly phrased questions\n\n- They expect bullet points, citations, confidence levels\n\n- They ask about things that aren\u2019t in the data\u2014and still expect an answer\n\nYour prompt strategy needs to evolve, adapt, and be versioned like any other part of the system.", "tags": ["Development", "AI"], "category": "", "path": "../_posts/2025-04-07-rag-at-scale-is-hard-what-startups-get-wrong.md"}
{"title": "RAG at Scale is Hard: Are Startups Getting It Wrong?", "heading": "4. Security, Versioning, and Governance (sliding 1)", "chunk": "When clients are uploading their own data, the stakes go up fast. - What happens when they upload outdated or incorrect files? - What if two documents contradict each other? - Can they see what sources were used in an answer? - Can you trace and fix a bad response? Without versioning, you can\u2019t track changes. Without access controls, you can\u2019t protect sensitive information. Without governance, you can\u2019t build trust.", "tags": ["Development", "AI"], "category": "", "path": "../_posts/2025-04-07-rag-at-scale-is-hard-what-startups-get-wrong.md"}
{"title": "RAG at Scale is Hard: Are Startups Getting It Wrong?", "heading": "Why Most Pilots Stall (sliding 1)", "chunk": "Most pilots are built for demos:\n\n- Clean data\n\n- Narrow scope\n\n- Friendly questions\n\n- No real-world usage or user feedback\n\nThey work because they were designed to succeed. But they don\u2019t represent reality. Then the team is asked to go to production\u2014on that same shaky foundation. That\u2019s when things fall apart.", "tags": ["Development", "AI"], "category": "", "path": "../_posts/2025-04-07-rag-at-scale-is-hard-what-startups-get-wrong.md"}
{"title": "RAG at Scale is Hard: Are Startups Getting It Wrong?", "heading": "If You\u2019re Building RAG for Real (sliding 1)", "chunk": "Here\u2019s what I\u2019ve learned from experiments, interviews, and seeing the guts of real systems:\n\n- **Start with a single use case. ** One question type. One document format. One workflow. - **Get retrieval right before worrying about generation. **\n\n- **Add evaluation early. ** Even basic tracking of retrieval relevance and answer helpfulness helps. - **Explain your answers. ** Grounding, citations, document previews\u2014whatever builds trust. - **Treat prompts as evolving code. ** They\u2019re part of the system, not a magic incantation. - **Don\u2019t offer \"upload anything\". ** Guide your users to what works well first.", "tags": ["Development", "AI"], "category": "", "path": "../_posts/2025-04-07-rag-at-scale-is-hard-what-startups-get-wrong.md"}
{"title": "RAG at Scale is Hard: Are Startups Getting It Wrong?", "heading": "Closing Thought (sliding 1)", "chunk": "RAG is exciting. It\u2019s one of the most promising ways to build useful, trustworthy AI into real-world products. But it\u2019s not a shortcut. It\u2019s not a silver bullet. And it\u2019s not something you can slap together in a two-week sprint with vague requirements and arbitrary data. If you want to build a product around RAG, don\u2019t treat it like a feature. Treat it like a platform\u2014because that\u2019s what it is.", "tags": ["Development", "AI"], "category": "", "path": "../_posts/2025-04-07-rag-at-scale-is-hard-what-startups-get-wrong.md"}
{"title": "From Helmets to Headsets \u2014 What Dev Teams Can Learn from the Outdoor Industry", "heading": "Introduction (sliding 1)", "chunk": "*This post might be stretching a metephor, but bear with me*\n\nFor over a decade, I worked in the outdoor industry, running centres, supporting stage and screen rigging, and helping build a centre of excellence that even the Health and Safety Executive used for training. In that world, safety isn\u2019t a side project it\u2019s the foundation everything rests on. Systems get reviewed, people are cross-trained, and refreshers are routine. Because the consequences of getting it wrong aren\u2019t abstract \u2014 they\u2019re physical, immediate, and sometimes fatal. When I moved into software development, I was struck by how similar the stakes can be but how invisible the risks often are. We don\u2019t talk about a \u201csafety management system\u201d in engineering, but we need one. Outages, cascading failures, security breaches, burnout, knowledge loss. These are the dev-world equivalents of rope system failure or a collapsed safety chains or rig. So I started applying some of the thinking that kept climbers and technicians safe to the way I run and support development teams. What emerged is a way of working that\u2019s calmer, more resilient, and a lot less likely to fall apart at 2am. Here\u2019s what that looks like. ---", "tags": ["Development"], "category": "", "path": "../_posts/2025-06-01-what-climbing-has-taught-me-about-dev-teams.md"}
{"title": "From Helmets to Headsets \u2014 What Dev Teams Can Learn from the Outdoor Industry", "heading": "Applying Outdoor Principles to Dev Teams (sliding 1)", "chunk": "In the outdoor world, we train for failure. Not because we expect it, but because we respect the complexity of what we\u2019re doing and we know things go wrong. The same logic applies to building and maintaining software systems. Here are five principles I\u2019ve carried over from that world and how they\u2019ve helped my dev teams. ---", "tags": ["Development"], "category": "", "path": "../_posts/2025-06-01-what-climbing-has-taught-me-about-dev-teams.md"}
{"title": "From Helmets to Headsets \u2014 What Dev Teams Can Learn from the Outdoor Industry", "heading": "1. \u201cInspect Your Kit\u201d \u2192 Code & Infrastructure Reviews (sliding 1)", "chunk": "Outdoor instructors don\u2019t just assume the gear works. Carabiners get checked. Ropes are logged and retired. Harnesses are triple-checked. You trust, but verify. Every time you leave tbe ground ir set off on the next pitch. In dev teams, we often let infrastructure rot quietly. Nobody\u2019s looked at that Kubernetes manifest in months. That CI/CD pipeline script? Still running, but no one remembers how it works. **Set aside time for system reviews**. Regularly check deployments, database settings, alert thresholds, and test coverage. Code reviews should go beyond syntax \u2014 they should catch bad assumptions and reinforce shared understanding. ---", "tags": ["Development"], "category": "", "path": "../_posts/2025-06-01-what-climbing-has-taught-me-about-dev-teams.md"}
{"title": "From Helmets to Headsets \u2014 What Dev Teams Can Learn from the Outdoor Industry", "heading": "2. \u201cKnow How to Self-Rescue\u201d \u2192 Cross-Training (sliding 1)", "chunk": "In rescue training, everyone learns how to help themselves and others. You don\u2019t want the only person who knows how to escaoe  they system to effect a rescue to be the one hanging mid-air. In dev, the equivalent is avoiding knowledge silos. If one person \u201cowns\u201d the deployment, and they\u2019re off sick when production crashes, your team is in freefall. **Cross-train**. Pair on things outside people\u2019s comfort zones. Document just enough that someone else can step in \u2014 not with perfect grace, but enough to keep the rope taut. ---", "tags": ["Development"], "category": "", "path": "../_posts/2025-06-01-what-climbing-has-taught-me-about-dev-teams.md"}
{"title": "From Helmets to Headsets \u2014 What Dev Teams Can Learn from the Outdoor Industry", "heading": "3. \u201cRun Drills\u201d \u2192 Fire Drills & Chaos Engineering (sliding 1)", "chunk": "We practiced rescues. We simulated injuries. We\u2019d pretend to lose radio contact, lost or forgotten equipmenr, clients taken unwell or the chani g weather. Why? Because the worst time to figure out a plan is when the real thing is happening. Dev teams should do the same. **Run \u201cfire drills\u201d** \u2014 simulate a downed service, expired certificate, or compromised token. Assign roles. See ha system and ow long it takes to respond. Afterwards, ask: *What helped? What didn\u2019t? *\n\nEven simple tabletop exercises can make a huge difference. ---", "tags": ["Development"], "category": "", "path": "../_posts/2025-06-01-what-climbing-has-taught-me-about-dev-teams.md"}
{"title": "From Helmets to Headsets \u2014 What Dev Teams Can Learn from the Outdoor Industry", "heading": "4. \u201cRefreshers & Recerts\u201d \u2192 Knowledge Maintenance (sliding 1)", "chunk": "Instructors re-certify. First aiders refresh. Rope skills get rusty without use. It\u2019s the same in software. Just because someone *used to know* how the auth flow worked doesn\u2019t mean they still do. **Schedule internal talks**. Let juniors lead knowledge shares. Do walkthroughs of \u201cold\u201d parts of the code. You\u2019re not just teaching \u2014 you\u2019re de-risking. ---", "tags": ["Development"], "category": "", "path": "../_posts/2025-06-01-what-climbing-has-taught-me-about-dev-teams.md"}
{"title": "From Helmets to Headsets \u2014 What Dev Teams Can Learn from the Outdoor Industry", "heading": "5. \u201cTrust the System, Not Just the People\u201d (sliding 1)", "chunk": "The best outdoor teams don\u2019t rely on one superstar. They rely on systems. The harness either passes the safety check or it doesn\u2019t. No exceptions. Dev teams need the same mindset. Don\u2019t just hope things go right \u2014 design for **failure containment**. Use monitoring. Add circuit breakers. Have checklists. Automate recovery where possible. Because if your team is one resignation or one incident away from disaster, that\u2019s not a team \u2014 that\u2019s a gamble. ---", "tags": ["Development"], "category": "", "path": "../_posts/2025-06-01-what-climbing-has-taught-me-about-dev-teams.md"}
{"title": "From Helmets to Headsets \u2014 What Dev Teams Can Learn from the Outdoor Industry", "heading": "Closing Thoughts (sliding 1)", "chunk": "When I talk to newer developers, I often tell them: *I\u2019ve never felt the need to shout at someone falling off a cliff. I just check the belay system. * The same goes for software. The best dev teams aren\u2019t just fast or smart \u2014 they\u2019re prepared. So if you\u2019ve ever led a group up a mountain or rappelled into a theatre ceiling, you already know more about good engineering culture than you think. Take that knowledge, and build the kind of team you\u2019d trust your life with \u2014 because, in many ways, we already do. *Luke i said at the start Ithink I've stretched this metephor enough*", "tags": ["Development"], "category": "", "path": "../_posts/2025-06-01-what-climbing-has-taught-me-about-dev-teams.md"}
{"title": "Post: Link", "heading": "Introduction (sliding 1)", "chunk": "This theme supports **link posts**, made famous by John Gruber. To use, just add `link: http://url-you-want-linked` to the post's YAML front matter and you're done. > And this is how a quote looks. Some [link](#) can also be shown.", "tags": ["link", "Post Formats"], "category": "", "path": "../_posts/__2010-03-07-post-link.md"}
{"title": "Postman Reusable Scripts", "heading": "Introduction (sliding 1)", "chunk": "I keep forgetting this.", "tags": ["Development"], "category": "", "path": "../_posts/2025-04-23-postman-reusable-scripts.md"}
{"title": "Postman Reusable Scripts", "heading": "Problem (sliding 1)", "chunk": "I have need of some reusable methods/functions when I am testing my API's with Postman. For example in one collection I need a random string from an array and I need to define that once.", "tags": ["Development"], "category": "", "path": "../_posts/2025-04-23-postman-reusable-scripts.md"}
{"title": "Postman Reusable Scripts", "heading": "Solution (sliding 1)", "chunk": "In the collections pre-request script I can add this:\n\n```bash\n\nmoodi = {\n    /**\n     * @returns {*} Random array element\n     */\n    targetScopeRandom() {\n        const arr = ['Engineering', 'HR', 'Accounts', 'Sales']\n        const idx = Math.floor(Math.random() * arr.length);\n        return arr[idx];\n    },\n};\n\n```\n\nUse it in the requests own pre-request script like this\n\n```bash\nconst targetScope = moodi.targetScopeRandom();\n```", "tags": ["Development"], "category": "", "path": "../_posts/2025-04-23-postman-reusable-scripts.md"}
{"title": "Postman Reusable Scripts", "heading": "Note (sliding 1)", "chunk": "While this works fine in my use case, I have wondered if this is a real solution --- I need to spend time on it", "tags": ["Development"], "category": "", "path": "../_posts/2025-04-23-postman-reusable-scripts.md"}
{"title": "Post: Notice", "heading": "Introduction (sliding 1)", "chunk": "A notice displays information that explains nearby content. Often used to call attention to a particular detail. When using Kramdown `{: .notice}` can be added after a sentence to assign the `.notice` to the `<p></p>` element. **Changes in Service:** We just updated our [privacy policy](#) here to better service our customers. We recommend reviewing the changes. {: .notice}\n\n**Primary Notice:** Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer nec odio. [Praesent libero](#). Sed cursus ante dapibus diam. Sed nisi. Nulla quis sem at nibh elementum imperdiet. {: .notice--primary}\n\n**Info Notice:** Lorem ipsum dolor sit amet, [consectetur adipiscing elit](#). Integer nec odio. Praesent libero. Sed cursus ante dapibus diam. Sed nisi. Nulla quis sem at nibh elementum imperdiet. {: .notice--info}\n\n**Warning Notice:** Lorem ipsum dolor sit amet, consectetur adipiscing elit. [Integer nec odio](#). Praesent libero. Sed cursus ante dapibus diam. Sed nisi. Nulla quis sem at nibh elementum imperdiet. {: .notice--warning}\n\n**Danger Notice:** Lorem ipsum dolor sit amet, [consectetur adipiscing](#) elit. Integer nec odio. Praesent libero. Sed cursus ante dapibus diam. Sed nisi.", "tags": ["Post Formats", "notice"], "category": "", "path": "../_posts/__2010-02-05-post-notice.md"}
{"title": "Post: Notice", "heading": "Introduction (sliding 2)", "chunk": "{: .notice}\n\n**Primary Notice:** Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer nec odio. [Praesent libero](#). Sed cursus ante dapibus diam. Sed nisi. Nulla quis sem at nibh elementum imperdiet. {: .notice--primary}\n\n**Info Notice:** Lorem ipsum dolor sit amet, [consectetur adipiscing elit](#). Integer nec odio. Praesent libero. Sed cursus ante dapibus diam. Sed nisi. Nulla quis sem at nibh elementum imperdiet. {: .notice--info}\n\n**Warning Notice:** Lorem ipsum dolor sit amet, consectetur adipiscing elit. [Integer nec odio](#). Praesent libero. Sed cursus ante dapibus diam. Sed nisi. Nulla quis sem at nibh elementum imperdiet. {: .notice--warning}\n\n**Danger Notice:** Lorem ipsum dolor sit amet, [consectetur adipiscing](#) elit. Integer nec odio. Praesent libero. Sed cursus ante dapibus diam. Sed nisi. Nulla quis sem at nibh elementum imperdiet. {: .notice--danger}\n\n**Success Notice:** Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer nec odio. Praesent libero. Sed cursus ante dapibus diam. Sed nisi. Nulla quis sem at [nibh elementum](#) imperdiet.", "tags": ["Post Formats", "notice"], "category": "", "path": "../_posts/__2010-02-05-post-notice.md"}
{"title": "Post: Notice", "heading": "Introduction (sliding 3)", "chunk": "Integer nec odio. Praesent libero. Sed cursus ante dapibus diam. Sed nisi. Nulla quis sem at nibh elementum imperdiet. {: .notice--info}\n\n**Warning Notice:** Lorem ipsum dolor sit amet, consectetur adipiscing elit. [Integer nec odio](#). Praesent libero. Sed cursus ante dapibus diam. Sed nisi. Nulla quis sem at nibh elementum imperdiet. {: .notice--warning}\n\n**Danger Notice:** Lorem ipsum dolor sit amet, [consectetur adipiscing](#) elit. Integer nec odio. Praesent libero. Sed cursus ante dapibus diam. Sed nisi. Nulla quis sem at nibh elementum imperdiet. {: .notice--danger}\n\n**Success Notice:** Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer nec odio. Praesent libero. Sed cursus ante dapibus diam. Sed nisi. Nulla quis sem at [nibh elementum](#) imperdiet. {: .notice--success}\n\nWant to wrap several paragraphs or other elements in a notice? Using Liquid to capture the content and then filter it with `markdownify` is a good way to go. ```html\n{% raw %}{% capture notice-2 %}", "tags": ["Post Formats", "notice"], "category": "", "path": "../_posts/__2010-02-05-post-notice.md"}
{"title": "Post: Notice", "heading": "New Site Features (sliding 1)", "chunk": "* You can now have cover images on blog pages\n* Drafts will now auto-save while writing\n{% endcapture %}{% endraw %}\n\n<div class=\"notice\">{% raw %}{{ notice-2 | markdownify }}{% endraw %}</div>\n```\n\n{% capture notice-2 %}", "tags": ["Post Formats", "notice"], "category": "", "path": "../_posts/__2010-02-05-post-notice.md"}
{"title": "Post: Notice", "heading": "New Site Features (sliding 1)", "chunk": "* You can now have cover images on blog pages\n* Drafts will now auto-save while writing\n{% endcapture %}\n\n<div class=\"notice\">\n {{ notice-2 | markdownify }}\n</div>\n\nOr you could skip the capture and stick with straight HTML. ```html\n<div class=\"notice\">\n <h4>Message</h4>\n <p>A basic message.</p>\n</div>\n```\n\n<div class=\"notice\">\n <h4>Message</h4>\n <p>A basic message.</p>\n</div>", "tags": ["Post Formats", "notice"], "category": "", "path": "../_posts/__2010-02-05-post-notice.md"}
{"title": "Anti-Dogma Development: A Personal Manifesto", "heading": "Introduction (sliding 1)", "chunk": "Not everything in modern software needs to follow traditional principles like SOLID, OOP, or Agile\u2122 to the letter. Many of us have discovered, through experience, that the world of code is messier\u2014and more human\u2014than those rules suggest. I\u2019ve started collecting the principles and patterns that I find actually help teams build, maintain, and deliver good software\u2014especially in fast-moving, real-world environments. Here are a few I lean on:", "tags": ["Development"], "category": "", "path": "../_posts/2025-04-02-lexicon.md"}
{"title": "Anti-Dogma Development: A Personal Manifesto", "heading": "FPOOP \u2013 Functional Plus Object-Oriented Programming (sliding 1)", "chunk": "I reach for functional style first\u2014pure functions, composition, and avoiding side effects\u2014but I don\u2019t dismiss OOP entirely. OOP brings structure, but over time (especially when teams change), it can become a tangle of inheritance and hidden state. It\u2019s easy to fall into the trap of creating new classes to model every noun, making testing painful and maintenance worse. FPOOP is a reminder: use OOP when it helps model behaviour explicitly, and default to functions and data where possible.", "tags": ["Development"], "category": "", "path": "../_posts/2025-04-02-lexicon.md"}
{"title": "Anti-Dogma Development: A Personal Manifesto", "heading": "Locality of Behaviour (LOB) \u2013 Keep It in Context (sliding 1)", "chunk": "SOLID\u2019s \"S\" is for Single Responsibility, and some folks like Uncle Bob suggest functions should be just a few lines. I get the point\u2014it\u2019s about clarity. But I follow **Locality of Behaviour** instead. A function might be 60\u201380 lines long, and that's okay\u2014if you can understand everything it does right there. \u201cThe larger the part of an implementation you can understand by looking at it\u2014without jumping between files\u2014the better.\u201d\n\nBy keeping related behaviour together, I reduce mental overhead, simplify debugging, and make accidental breakage less likely.", "tags": ["Development"], "category": "", "path": "../_posts/2025-04-02-lexicon.md"}
{"title": "Anti-Dogma Development: A Personal Manifesto", "heading": "Modules Over Layers \u2013 Organize by Concern, Not Type (sliding 1)", "chunk": "Instead of organizing code into folders like controllers/, models/, and services/, I organize by feature or domain. Each module or domain folder has everything it needs\u2014routes, services, types, tests\u2014co-located. It makes onboarding easier and keeps changes local. Think src/users/ with all the user-related logic together, instead of chasing files across the project.", "tags": ["Development"], "category": "", "path": "../_posts/2025-04-02-lexicon.md"}
{"title": "Anti-Dogma Development: A Personal Manifesto", "heading": "TDD-ish \u2013 Test When It Helps (sliding 1)", "chunk": "I believe in testing\u2014but not in 100% test coverage or writing tests before every line of code. I write tests:\n\n- When I want to lock down logic\n- When bugs pop up\n- When I'm building something risky or important\n\nSometimes I write tests first. Sometimes later. But I don\u2019t let the dogma get in the way of flow.", "tags": ["Development"], "category": "", "path": "../_posts/2025-04-02-lexicon.md"}
{"title": "Anti-Dogma Development: A Personal Manifesto", "heading": "Delivery-Driven Development (sliding 1)", "chunk": "Rather than dogmatic architecture, you ask: \"What do we need to deliver this thing reliably and safely?\" Shipping value > meeting an arbitrary principle.", "tags": ["Development"], "category": "", "path": "../_posts/2025-04-02-lexicon.md"}
{"title": "Anti-Dogma Development: A Personal Manifesto", "heading": "Good Enough is Good Enough \u2013 Working code is better than perfect architecture (sliding 1)", "chunk": "Perfect is the enemy of done. I\u2019ve worked on teams that over-designed upfront and never shipped. Now, I aim to get something useful working\u2014then iterate and improve. That doesn\u2019t mean rushing garbage into prod. It means recognizing when a design is \"good enough\" to unblock learning or delivery. _As a side note search \"Good Enough Donald Winnicott software\"_", "tags": ["Development"], "category": "", "path": "../_posts/2025-04-02-lexicon.md"}
{"title": "Anti-Dogma Development: A Personal Manifesto", "heading": "Cognitive Budget Awareness \u2013 Don\u2019t waste attention (sliding 1)", "chunk": "Every team/individual has a limited \u201ccognitive budget.\u201d If your architecture, naming, or conventions are hard to follow, that budget gets burned fast. I strive for defaults, clarity, and consistency so people can focus on logic\u2014not deciphering the project. The same thing for context switching, it quickly saps your cognitive resources. There is no such thing as Multitasking, its is a myth", "tags": ["Development"], "category": "", "path": "../_posts/2025-04-02-lexicon.md"}
{"title": "Anti-Dogma Development: A Personal Manifesto", "heading": "Minimum Process, Maximum Outcome \u2013 Don't let process become the product (sliding 1)", "chunk": "I\u2019ve been in stand ups that waste time and retros that become therapy sessions. Meetings, Jira boards, planning poker\u2014all useful only if they serve the team\u2019s momentum and outcomes. If something doesn\u2019t help us move forward or solve a real problem, it\u2019s on the chopping block.", "tags": ["Development"], "category": "", "path": "../_posts/2025-04-02-lexicon.md"}
{"title": "Anti-Dogma Development: A Personal Manifesto", "heading": "You Can Always Delete It \u2013 Don\u2019t overthink first drafts (sliding 1)", "chunk": "Whether it's code, docs, or diagrams\u2014start rough. Write the ugly version. Draw the bad diagram. You can always clean it up later. This mindset kills perfectionism and gets momentum going fast.", "tags": ["Development"], "category": "", "path": "../_posts/2025-04-02-lexicon.md"}
{"title": "Anti-Dogma Development: A Personal Manifesto", "heading": "Exploration is not Waste \u2013 Some tangents are necessary (sliding 1)", "chunk": "Some dev time will be \"wasted\"\u2014spikes, ideas that didn\u2019t pan out, tools you end up ditching. That\u2019s fine. Exploring dead ends is how you know you\u2019re on the right path. Not everything should go into version control, but play and exploration are part of serious work.", "tags": ["Development"], "category": "", "path": "../_posts/2025-04-02-lexicon.md"}
{"title": "Anti-Dogma Development: A Personal Manifesto", "heading": "Scotty Principle (sliding 1)", "chunk": "The Urban Dictionary defines The Scotty Principle as:\n\nThe defacto gold star standard for delivering products and/or services within a projected timeframe. Derived from the original Star Trek series wherein Lt. Cmdr. Montgomery \u2018Scotty\u2019 Scott consistently made the seemingly impossible happen just in time to save the crew of the Enterprise from disaster. The premise is simple:\n\n1. Caluculate average required time for completion of given task. 2. Depending on importance of task, add 25-50% additional time to original estimate. 3. Report and commit to inflated time estimate with superiors, clients, etc. 4. Under optimal conditions the task is completed closer to the original time estimate vs. the inflated delivery time expected by those waiting. There are, of course, corollaries associated with it, like the use of techno-babble. See, Scotty always had excuses to why things would take a long time. \u201cI have to re-calculate the deterioration of dilithium, since we\u2019re using it an accelerated rate due to the ion storm.\u201d This isn\u2019t just a factor of Star Trek, mind you. Where Scotty would say \u201cSomeone has to go into the Jeffries Tube!\u201d Doctor Who would say \u201cI have to reverse the polarity of the neutron flow.\u201d\n\nSo here are my Scotty School Rules for Support. 1. Always pad your time estimates. (\u201cWell. I can PROBABLY do it in a week.\u201d)\n2. Always use big words.", "tags": ["Development"], "category": "", "path": "../_posts/2025-04-02-lexicon.md"}
{"title": "Anti-Dogma Development: A Personal Manifesto", "heading": "Scotty Principle (sliding 2)", "chunk": "2. Depending on importance of task, add 25-50% additional time to original estimate. 3. Report and commit to inflated time estimate with superiors, clients, etc. 4. Under optimal conditions the task is completed closer to the original time estimate vs. the inflated delivery time expected by those waiting. There are, of course, corollaries associated with it, like the use of techno-babble. See, Scotty always had excuses to why things would take a long time. \u201cI have to re-calculate the deterioration of dilithium, since we\u2019re using it an accelerated rate due to the ion storm.\u201d This isn\u2019t just a factor of Star Trek, mind you. Where Scotty would say \u201cSomeone has to go into the Jeffries Tube!\u201d Doctor Who would say \u201cI have to reverse the polarity of the neutron flow.\u201d\n\nSo here are my Scotty School Rules for Support. 1. Always pad your time estimates. (\u201cWell. I can PROBABLY do it in a week.\u201d)\n2. Always use big words. (\u201cJust because we violated proper procedure doesn\u2019t abrogate your need to follow it.\u201d)\n3. Always use buzz words. (\u201cActually, SEO will be adversely impacted by FrontPage due to it\u2019s lack of support of Web 3.0 and HTML5.\u201d)\n4. Always be honest. (\u201cNo, it\u2019s not complicated, it\u2019s just time consuming.\u201d)\n5.", "tags": ["Development"], "category": "", "path": "../_posts/2025-04-02-lexicon.md"}
{"title": "Anti-Dogma Development: A Personal Manifesto", "heading": "Scotty Principle (sliding 3)", "chunk": "See, Scotty always had excuses to why things would take a long time. \u201cI have to re-calculate the deterioration of dilithium, since we\u2019re using it an accelerated rate due to the ion storm.\u201d This isn\u2019t just a factor of Star Trek, mind you. Where Scotty would say \u201cSomeone has to go into the Jeffries Tube!\u201d Doctor Who would say \u201cI have to reverse the polarity of the neutron flow.\u201d\n\nSo here are my Scotty School Rules for Support. 1. Always pad your time estimates. (\u201cWell. I can PROBABLY do it in a week.\u201d)\n2. Always use big words. (\u201cJust because we violated proper procedure doesn\u2019t abrogate your need to follow it.\u201d)\n3. Always use buzz words. (\u201cActually, SEO will be adversely impacted by FrontPage due to it\u2019s lack of support of Web 3.0 and HTML5.\u201d)\n4. Always be honest. (\u201cNo, it\u2019s not complicated, it\u2019s just time consuming.\u201d)\n5. Always say you can do it. (\u201cRebuild the entire program in a language I\u2019ve never heard of? Sure.\u201d)\n6. Always do it the right way. (\u201cYou want me to use FrontPage to build a website? No.\u201d)\n7. If they make you do it the wrong way, pad your estimate to allow you a chance to do it BOTH ways.", "tags": ["Development"], "category": "", "path": "../_posts/2025-04-02-lexicon.md"}
{"title": "Anti-Dogma Development: A Personal Manifesto", "heading": "Scotty Principle (sliding 4)", "chunk": "1. Always pad your time estimates. (\u201cWell. I can PROBABLY do it in a week.\u201d)\n2. Always use big words. (\u201cJust because we violated proper procedure doesn\u2019t abrogate your need to follow it.\u201d)\n3. Always use buzz words. (\u201cActually, SEO will be adversely impacted by FrontPage due to it\u2019s lack of support of Web 3.0 and HTML5.\u201d)\n4. Always be honest. (\u201cNo, it\u2019s not complicated, it\u2019s just time consuming.\u201d)\n5. Always say you can do it. (\u201cRebuild the entire program in a language I\u2019ve never heard of? Sure.\u201d)\n6. Always do it the right way. (\u201cYou want me to use FrontPage to build a website? No.\u201d)\n7. If they make you do it the wrong way, pad your estimate to allow you a chance to do it BOTH ways. (\u201cYeah, I did the blog on FrontPage, but it looks weird, so I mocked it up on WordPress.\u201d)\n\nShamelessly copied from [Chez Ipstenu] blog\n\n[Chez Ipstenu]: https://ipstenu.org/2011/the-scotty-principle/", "tags": ["Development"], "category": "", "path": "../_posts/2025-04-02-lexicon.md"}
{"title": "npm install", "heading": "Introduction (sliding 1)", "chunk": "I needed to take a step back and fully understand this issue so I could explain it clearly to both new and experienced developers. The problem surfaced because our deployment pipelines `run npm audit`, which became a bottleneck in our process. We kept seeing the same vulnerabilities flagged repeatedly, even though they had been fixed multiple times.", "tags": ["code", "npm", "nodejs"], "category": "", "path": "../_posts/2024-05-10-npm-install.md"}
{"title": "npm install", "heading": "Here we go, npm instal, ci and audit (sliding 1)", "chunk": "Here\u2019s an overview of the flow from installing a new package with npm to running npm install or npm ci in a pipeline, along with details on how vulnerabilities may resurface through npm audit.", "tags": ["code", "npm", "nodejs"], "category": "", "path": "../_posts/2024-05-10-npm-install.md"}
{"title": "npm install", "heading": "1 Installing a Package: (sliding 1)", "chunk": "- When you install a new package locally (e.g., `npm install <package-name>`), npm adds the package to the `node_modules` directory and updates your `package.json` and `package-lock.json` files (or yarn.lock if you use Yarn). - `package.json` specifies the declared dependencies and their versions. - `package-lock.json` contains the exact versions of the installed packages and their entire dependency tree (including transitive dependencies). This ensures that everyone who installs your project gets the same versions of dependencies.", "tags": ["code", "npm", "nodejs"], "category": "", "path": "../_posts/2024-05-10-npm-install.md"}
{"title": "npm install", "heading": "2. Pushing to Version Control: (sliding 1)", "chunk": "Once you are satisfied with your code, including the new dependency, you push the changes to version control (e.g., Git). It\u2019s important that both the `package.json` and `package-lock.json` files are committed to ensure consistency across environments.", "tags": ["code", "npm", "nodejs"], "category": "", "path": "../_posts/2024-05-10-npm-install.md"}
{"title": "npm install", "heading": "3. Pipeline \u2013 npm install vs npm ci: (sliding 1)", "chunk": "**`npm install`:**\n\nDuring a build or deployment pipeline, running `npm install` will install dependencies based on the package.json and update the node_modules directory. If a `package-lock.json` file exists, npm tries to install exact versions from the lock file, but if it detects any changes (e.g., new versions of dependencies or conflicts), it may update the lock file. (See dependency notation)\n\n**`npm ci:`**\n\n- In a CI/CD pipeline, npm ci is preferred as it is faster and more deterministic. - It strictly adheres to the versions specified in package-lock.json. If any discrepancies (such as missing or extra dependencies) are found, the entire node_modules directory is deleted, and the exact dependencies from the package-lock.json are installed. - npm ci does not update package-lock.json, making it ideal for CI environments where reproducibility is critical.", "tags": ["code", "npm", "nodejs"], "category": "", "path": "../_posts/2024-05-10-npm-install.md"}
{"title": "npm install", "heading": "4. `npm audit`: (sliding 1)", "chunk": "During or after the install process, npm may run `npm audit` to check for security vulnerabilities in your dependencies. It compares the installed packages against a database of known vulnerabilities and flags any risks. `npm audit fix` can automatically update vulnerable dependencies to the latest non-breaking versions (as defined by server).", "tags": ["code", "npm", "nodejs"], "category": "", "path": "../_posts/2024-05-10-npm-install.md"}
{"title": "npm install", "heading": "How Does `npm audit` problems reappear? (sliding 1)", "chunk": "**Indirect Dependencies (Transitive Dependencies):**\n\nMost npm packages rely on other packages (dependencies of dependencies), and vulnerabilities often arise in these indirect dependencies. Even if you\u2019ve addressed an issue by updating your direct dependencies, some transitive dependencies may still have unresolved issues. This happens because they may not have yet released a fixed version. **New Vulnerabilities Discovered:**\n\nSometimes, new vulnerabilities are discovered in packages that were previously considered safe. When npm\u2019s vulnerability database is updated, a previously resolved issue may reappear if it\u2019s related to a newly discovered flaw. **Out-of-Date Dependencies:**\n\n- When the `package-lock.json` or a specific package hasn\u2019t been updated for a while, and a vulnerability was later fixed in a newer version, your audit might flag the outdated dependency. - Running `npm audit` regularly (especially on pipelines) will catch such vulnerabilities, but sometimes an older transitive dependency may bring back the issue. **Partial Fixes:**\n\nSometimes, packages release partial fixes, where only certain issues are resolved. If the fix doesn\u2019t cover all security concerns, npm audit may still flag the package. **Conflicts Between Versions:**\n\nCertain updates may not be backward compatible with your project\u2019s current environment or with other dependencies. This can lead to situations where you are unable to fully update vulnerable dependencies without breaking something else in your codebase.", "tags": ["code", "npm", "nodejs"], "category": "", "path": "../_posts/2024-05-10-npm-install.md"}
{"title": "npm install", "heading": "Dealing with Persistent npm audit Problems: (sliding 1)", "chunk": "**Explicit Version Control:** Sometimes you may have to manually control the versions in package-lock.json by using specific version ranges or resolutions (in tools like Yarn) to enforce the use of patched versions. **Selective Fixing:** If you know a particular vulnerability doesn\u2019t affect your project (e.g., it only impacts a feature you don\u2019t use), you can audit it with exceptions. **Monitor Transitive Dependencies:**\n\nRegularly check your dependency tree to monitor transitive dependencies and see if any have lagging versions. This can be done using tools like npm ls or through dependency-checking platforms.", "tags": ["code", "npm", "nodejs"], "category": "", "path": "../_posts/2024-05-10-npm-install.md"}
{"title": "Azure AppInsights with Nodejs adding operation id to response", "heading": "Introduction (sliding 1)", "chunk": "**Problem:** I needed to add an additional response header to my requests to aid in tracking errors. **Here is my solution:** Add middleware that will add the AppInsights Operation ID to the response. The Operation ID is unique to each request so searching for it is simple. ```:javascript\nimport { Request, Response, NextFunction } from 'express';\nimport appInsights from '../../lib/appInsights';\n\nexport default (req: Request, res: Response, next: NextFunction) => {\n const { operation } = appInsights.getCorrelationContext();\n\n res.setHeader('X-Operation-ID', operation.id);\n\n next();\n};\n```\n\nNote\n\n```:javascript\nimport appInsights from '../../lib/appInsights';\n```\n\nAppInsights is initiated in an additional module that configures and filters requests E.g. Stops requests to the `health check` endpoints being logged\n\nNow I can view requests in the browser, look for request response headers and specifically `X-Operation-ID`. This will give me an ID string that can be queried in Azure AppInsights logs. For example: Query the 'exceptions' table\n\n```javascript\nexceptions\n| where operation_Id == << X Operation ID>>\n```", "tags": ["code", "typescript", "nodejs"], "category": "", "path": "../_posts/2024-01-06-azure-appinsights-with-nodejs-adding-operation-id-to-response.md"}
{"title": "Web hygiene", "heading": "Introduction (sliding 1)", "chunk": "In the fast-evolving world of technology, managing web content effectively is often a complex, multifaceted task. As a tech lead in a large international technology company, I\u2019ve come to recognize the importance of not just keeping up with technological advancements, but also maintaining a standard I like to call \u201cweb hygiene.\u201d While not an official industry term, web hygiene captures an essential, holistic approach to how we create, maintain, and protect our web presence.", "tags": ["philosophy", "work flow"], "category": "", "path": "../_posts/2025-03-12-web-hygiene.md"}
{"title": "Web hygiene", "heading": "What is Web Hygiene? (sliding 1)", "chunk": "Web hygiene is a practice that embodies the principles and actions necessary to maintain a healthy, compliant, and user-centric online environment. It\u2019s not just about flashy features or impressive performance metrics\u2014it\u2019s about ensuring that every part of our web content adheres to certain standards that safeguard users, support accessibility, and uphold our company\u2019s reputation. The term itself, \u201chygiene,\u201d implies cleanliness and routine care\u2014much like personal hygiene is a baseline for health and social interactions, web hygiene is the baseline for maintaining a trustworthy, robust, and inclusive web presence.", "tags": ["philosophy", "work flow"], "category": "", "path": "../_posts/2025-03-12-web-hygiene.md"}
{"title": "Web hygiene", "heading": "The Core Pillars of Web Hygiene (sliding 1)", "chunk": "Web hygiene is not just one aspect of web management; it\u2019s a cohesive practice that spans several critical areas:", "tags": ["philosophy", "work flow"], "category": "", "path": "../_posts/2025-03-12-web-hygiene.md"}
{"title": "Web hygiene", "heading": "1. Accessibility (sliding 1)", "chunk": "An inclusive web experience is not just a compliance checkbox; it\u2019s a commitment to enabling all users to engage with our content. Meeting WCAG standards ensures that people with disabilities can navigate, read, and interact with our sites seamlessly. Proper web hygiene integrates accessibility into every stage of design and development, making it part of the DNA of our content creation.", "tags": ["philosophy", "work flow"], "category": "", "path": "../_posts/2025-03-12-web-hygiene.md"}
{"title": "Web hygiene", "heading": "2. Data Collection and PII (Personally Identifiable Information) (sliding 1)", "chunk": "Data is a powerful asset, but with great power comes great responsibility. Web hygiene means that any data we collect adheres strictly to privacy laws and ethical standards. This involves implementing transparent consent mechanisms, anonymizing data wherever possible, and maintaining a secure infrastructure to protect against breaches. The trust we build through responsible data collection cannot be understated\u2014it\u2019s what sets leading technology companies apart from those who cut corners.", "tags": ["philosophy", "work flow"], "category": "", "path": "../_posts/2025-03-12-web-hygiene.md"}
{"title": "Web hygiene", "heading": "3. Maintenance and Upkeep (sliding 1)", "chunk": "Web hygiene demands regular maintenance. This includes routine security audits, updates, and testing to ensure that we\u2019re proactively closing vulnerabilities and optimizing performance. The idea here is to prevent problems before they arise\u2014keeping the web infrastructure as healthy as possible to avoid breakdowns that could compromise user experience and trust.", "tags": ["philosophy", "work flow"], "category": "", "path": "../_posts/2025-03-12-web-hygiene.md"}
{"title": "Web hygiene", "heading": "4. Content Quality (sliding 1)", "chunk": "Even the most secure, accessible, and well-maintained site can fall flat if the content is subpar. Good web hygiene includes having clear guidelines for writing effective, relevant, and engaging content. This means avoiding jargon, staying concise, and keeping the end user in mind at all times. Content should be easy to read, informative, and updated as needed to reflect current information and practices.", "tags": ["philosophy", "work flow"], "category": "", "path": "../_posts/2025-03-12-web-hygiene.md"}
{"title": "Web hygiene", "heading": "Training and Access Control (sliding 1)", "chunk": "To uphold web hygiene, it\u2019s crucial that all web content creators and site owners undergo an access course or training before being given the keys to their own subdomain or access to an existing one. This training ensures they understand the fundamentals of web hygiene, including accessibility, data handling, and content standards. This process will be tracked, and refresher sessions will be offered to maintain their access over time, reinforcing a culture of continuous learning and adherence to best practices.", "tags": ["philosophy", "work flow"], "category": "", "path": "../_posts/2025-03-12-web-hygiene.md"}
{"title": "Web hygiene", "heading": "Automated Tools and Monitoring (sliding 1)", "chunk": "Web hygiene extends beyond human practices. Automated tools can be employed to scan websites and provide feedback on compliance with accessibility, security, and content quality. These tools serve as a proactive measure, highlighting potential issues before they escalate and ensuring that web hygiene standards are consistently met.", "tags": ["philosophy", "work flow"], "category": "", "path": "../_posts/2025-03-12-web-hygiene.md"}
{"title": "Web hygiene", "heading": "Why Web Hygiene Matters (sliding 1)", "chunk": "You might wonder, why not just let creators and site owners do what they please? Isn\u2019t creativity key? While creative freedom is important, in a large-scale organization, it must coexist with responsible practices. Poor web hygiene leads to a host of issues\u2014ranging from accessibility complaints and data privacy violations to decreased trust and engagement. In an environment where a single oversight can cascade into serious reputational damage, maintaining web hygiene isn\u2019t just good practice\u2014it\u2019s a business imperative.", "tags": ["philosophy", "work flow"], "category": "", "path": "../_posts/2025-03-12-web-hygiene.md"}
{"title": "Web hygiene", "heading": "Taking a Holistic Approach (sliding 1)", "chunk": "Web hygiene isn\u2019t a one-time checklist or a static policy; it\u2019s a dynamic, ongoing process that involves cross-functional teams, including developers, content strategists, legal advisors, and security experts. It requires a shared understanding and commitment across the organization to do what\u2019s right\u2014even when no one is watching. It\u2019s about creating a culture where web hygiene is as natural as locking the doors when you leave a building. When every team member understands their role in maintaining these standards, we foster a healthier web presence that\u2019s not just compliant, but also resilient and respected. In the end, web hygiene represents a commitment to quality, integrity, and inclusivity that benefits both the company and its users. It\u2019s about setting the bar higher and making sure that we\u2019re doing more than the bare minimum\u2014we\u2019re upholding the values that make our digital spaces trustworthy and sustainable for all.", "tags": ["philosophy", "work flow"], "category": "", "path": "../_posts/2025-03-12-web-hygiene.md"}
{"title": "Postman and Faker", "heading": "Introduction (sliding 1)", "chunk": "# Dynamic User Creation with Postman Pre-request Scripts and Faker\n\nI'm a huge fan of Postman for API development\u2014and it turns out I'm only scratching the surface of its capabilities! One of the most powerful features is that the Pre-request scripts have access to Faker. This enables you to generate dynamic, realistic test data on the fly. Below is an example script that creates a dynamic request body for a user, leveraging Faker data:\n\n```javascript\n// Retrieve dynamic values using Postman's Faker variables\nconst firstName = pm.variables.replaceIn(\"{{$randomFirstName}}\");\nconst lastName = pm.variables.replaceIn(\"{{$randomLastName}}\");\nconst domain = pm.variables\n  .replaceIn(\"{{$randomCompanyName}}\")\n  .replace(/[, ]+/g, \".\") .trim();\n\n// Construct a dynamic user object with a generated email\nconst body = {\n  firstName,\n  lastName,\n  email: `${firstName}.${lastName}@${domain}.com`,\n};\n\n// Set the constructed JSON body into an environment variable for use in the request\npm.environment.set(\"body\", JSON.stringify(body));\n```", "tags": ["Development"], "category": "", "path": "../_posts/2023-10-17-postman-and-faker.md"}
{"title": "Postman and Faker", "heading": "How It Works (sliding 1)", "chunk": "**Generating Random Data:**\n\n- Faker is used to generate realistic names and company names. In this example, `{{$randomFirstName}}`, `{{$randomLastName}}`, and `{{$randomCompanyName}}` are replaced with random data. - A random integer is created (this can be used for additional dynamic elements if needed).", "tags": ["Development"], "category": "", "path": "../_posts/2023-10-17-postman-and-faker.md"}
{"title": "Postman and Faker", "heading": "Constructing the Email: (sliding 1)", "chunk": "The email address is dynamically constructed using template literals, ensuring that it combines the generated first name, last name, and a sanitized version of the company name (with spaces and commas replaced by periods). Storing the Dynamic Body:\n\nThe dynamically generated user object is stringified and stored in an environment variable (body). This variable can then be referenced in your API request. Additional Resources\n\nFor more details on the Faker options available in Postman, check out Postman\u2019s Faker Documentation. This approach not only simplifies testing but also adds realism to your API calls\u2014helping you ensure that your endpoints handle varied data gracefully. _Happy testing!_", "tags": ["Development"], "category": "", "path": "../_posts/2023-10-17-postman-and-faker.md"}
{"title": "Azure AppInsights Query Logs", "heading": "Introduction (sliding 1)", "chunk": "Examples of Azure Application Insights Queries (Kusto Query Language)\n\nFor more details, refer to the following documentation:\n\n- [Kusto Query Language](https://learn.microsoft.com/en-us/azure/data-explorer/kusto/query/)\n- [Date Syntax](https://learn.microsoft.com/en-us/azure/data-explorer/kusto/query/samples?pivots=azuremonitor&toc=%2Fazure%2Fazure-monitor%2Ftoc.json#date-time-basics)\n- [String Operators](https://learn.microsoft.com/en-us/azure/data-explorer/kusto/query/datatypes-string-operators)\n\n---", "tags": ["code", "azure", "kutso"], "category": "", "path": "../_posts/2024-11-24-azure-appinsights-query-logs.md"}
{"title": "Azure AppInsights Query Logs", "heading": "1.1 Search Across All Tables (sliding 1)", "chunk": "The simplest query uses the `search` command to scan all tables and return the first set of results. ```kusto\nsearch *\n```\n\nNote: This query can be very inefficient because it scans data across all tables. 1.2 Search Within a Specific Table\nYou can also query specific tables directly. For example:\n\n```kusto\ncustomEvents\n```\n\nOther common tables include:\n\n- requests\n- exceptions", "tags": ["code", "azure", "kutso"], "category": "", "path": "../_posts/2024-11-24-azure-appinsights-query-logs.md"}
{"title": "Azure AppInsights Query Logs", "heading": "2.1 Using a Relative Time Constraint (sliding 1)", "chunk": "Filter rows to include only those with timestamps within the last 2 days:\n\n```kusto\nrequests\n| where timestamp > now() - 2d\n```", "tags": ["code", "azure", "kutso"], "category": "", "path": "../_posts/2024-11-24-azure-appinsights-query-logs.md"}
{"title": "Azure AppInsights Query Logs", "heading": "2.2 Filtering Between Two Specific Date/Time Values (sliding 1)", "chunk": "To narrow down results between two exact date/time values, use the between operator:\n\n```kusto\nexceptions\n| where timestamp between (datetime(\"2018-06-30 22:46:42\") .. datetime(\"2018-07-01 00:57:27\"))\n```", "tags": ["code", "azure", "kutso"], "category": "", "path": "../_posts/2024-11-24-azure-appinsights-query-logs.md"}
{"title": "Azure AppInsights Query Logs", "heading": "3.1 Finding Distinct Values (sliding 1)", "chunk": "Retrieve all unique values from a column (e.g., cloud_RoleName in customEvents):\n\n```kusto\ncustomEvents\n| distinct cloud_RoleName\n```", "tags": ["code", "azure", "kutso"], "category": "", "path": "../_posts/2024-11-24-azure-appinsights-query-logs.md"}
{"title": "Azure AppInsights Query Logs", "heading": "3.2 Summarizing Data (sliding 1)", "chunk": "Summarize (or tally) the data by counting occurrences of each distinct value:\n\n```kusto\ncustomEvents\n| summarize count() by cloud_RoleName\n```", "tags": ["code", "azure", "kutso"], "category": "", "path": "../_posts/2024-11-24-azure-appinsights-query-logs.md"}
{"title": "Azure AppInsights Query Logs", "heading": "4. Using Custom Dimensions (sliding 1)", "chunk": "Custom dimensions are JSON strings that store additional data. For example, to extract a user\u2019s email from the customDimensions field:\n\n```kusto\ncustomEvents\n| extend email = tostring(customDimensions[\"userEmail\"])\n| where email == \"dave@dave.com\"\n```\n\nTo get all unique emails and count how many times each appears:\n\n```kusto\ncustomEvents\n| extend email = tostring(customDimensions[\"userEmail\"])\n| summarize count() by email\n```", "tags": ["code", "azure", "kutso"], "category": "", "path": "../_posts/2024-11-24-azure-appinsights-query-logs.md"}
{"title": "Azure AppInsights Query Logs", "heading": "5. String Filtering (sliding 1)", "chunk": "Use string filters to refine your search. For example, to list all distinct `cloud_RoleName` values containing the string \"cohort\":\n\n```kusto\ncustomEvents\n| distinct cloud_RoleName\n| where cloud_RoleName contains 'cOhoRt'\n```\n\n_Note: The contains operator is case-insensitive by default. To enforce case sensitivity, consider using other string functions or prefixes._", "tags": ["code", "azure", "kutso"], "category": "", "path": "../_posts/2024-11-24-azure-appinsights-query-logs.md"}
{"title": "Azure AppInsights Query Logs", "heading": "6.1 Querying by Cloud Role Name (sliding 1)", "chunk": "Retrieve rows from a table (e.g., browserTimings) where the cloud role name matches a specific value:\n\n```kusto\nbrowserTimings\n| where cloud_RoleName == \"Web App\"\n```\n\nTo limit the results to the last 15 days:\n\n```kusto\ncustomEvents\n| where cloud_RoleName == \"Web App\"\n| where timestamp > ago(15d)\n```\n\nFor shorter intervals, you can use:\n\n```kusto\n| where timestamp > ago(15h) for hours\n| where timestamp > ago(15m) for minutes\n```", "tags": ["code", "azure", "kutso"], "category": "", "path": "../_posts/2024-11-24-azure-appinsights-query-logs.md"}
{"title": "Azure AppInsights Query Logs", "heading": "6.2 Grouping and Counting by a Key (sliding 1)", "chunk": "Group and count the data based on a key (e.g., cloud_RoleName):\n\n```kusto\ncustomEvents\n| summarize Count = count() by cloud_RoleName\n```", "tags": ["code", "azure", "kutso"], "category": "", "path": "../_posts/2024-11-24-azure-appinsights-query-logs.md"}
{"title": "Azure AppInsights Query Logs", "heading": "6.3 Searching within a Custom Field/Object (sliding 1)", "chunk": "Extract and filter on a custom property within the JSON stored in customDimensions. For example, to search for rows where the custom property equals \"Screen: Learning Journey\":\n\n```kusto\ncustomEvents\n| extend name = tostring(customDimensions[\"customProperty\"])\n| where name == \"Screen: Learning Journey\"\n```\n\n_Optional: Append | count to get a count of matching rows._", "tags": ["code", "azure", "kutso"], "category": "", "path": "../_posts/2024-11-24-azure-appinsights-query-logs.md"}
{"title": "Basic patterns for 99% of development", "heading": "Introduction (sliding 1)", "chunk": "I had to explain this to a couple of new devs on the team. Not that their code was wrong, but there is a way of approaching problems that make better sense. So here is my take on Strategy and Builder patterns\n\nTL;DR:\nUse the Strategy pattern when you need interchangeable algorithms, the Builder pattern when constructing complex objects with many optional properties. In most cases, Strategy and Builder suffice.", "tags": ["Development"], "category": "", "path": "../_posts/2024-04-27-basic-patterns-for-99-of-development.md"}
{"title": "Basic patterns for 99% of development", "heading": "What is it? (sliding 1)", "chunk": "The Strategy pattern lets you define a family of methods, classes, algorithms and encapsulate each one, and make them interchangeable. This is especially helpful when you have multiple ways to perform a task and want to avoid a tangle of conditionals.", "tags": ["Development"], "category": "", "path": "../_posts/2024-04-27-basic-patterns-for-99-of-development.md"}
{"title": "Basic patterns for 99% of development", "heading": "Before: A Mess of Conditionals (sliding 1)", "chunk": "Imagine calculating a discount where you choose between a percentage discount and a fixed discount. Without the pattern, you might write something like:\n\n```typescript\nfunction calculateDiscount(\n  price: number,\n  discountType: string,\n  discountValue: number\n): number {\n  if (discountType === \"percentage\") {\n    return price * (discountValue / 100);\n  } else if (discountType === \"fixed\") {\n    return discountValue;\n  }\n  return 0;\n}\n\n// Usage\nconst discount = calculateDiscount(200, \"percentage\", 10);\n```\n\nThis works, but as the number of discount types grows, the logic becomes hard to manage.", "tags": ["Development"], "category": "", "path": "../_posts/2024-04-27-basic-patterns-for-99-of-development.md"}
{"title": "Basic patterns for 99% of development", "heading": "After: Applying the Strategy Pattern (sliding 1)", "chunk": "With Strategy, we define a common interface and create separate classes for each discount type:\n\n```typescript\n// Define the strategy interface\ninterface DiscountStrategy {\n  calculate(price: number, discountValue: number): number;\n}\n\n// Concrete strategies\nclass PercentageDiscount implements DiscountStrategy {\n  calculate(price: number, discountValue: number): number {\n    return price * (discountValue / 100);\n  }\n}\n\nclass FixedDiscount implements DiscountStrategy {\n  calculate(price: number, discountValue: number): number {\n    return discountValue;\n  }\n}\n\n// Context that uses a strategy\nclass DiscountCalculator {\n  constructor(private strategy: DiscountStrategy) {}\n\n  getDiscount(price: number, discountValue: number): number {\n    return this.strategy.calculate(price, discountValue);\n  }\n}\n\n// Usage\nconst percentageCalc = new DiscountCalculator(new PercentageDiscount());\nconsole.log(percentageCalc.getDiscount(200, 10)); // 20\n\nconst fixedCalc = new DiscountCalculator(new FixedDiscount());\nconsole.log(fixedCalc.getDiscount(200, 10)); // 10\n```", "tags": ["Development"], "category": "", "path": "../_posts/2024-04-27-basic-patterns-for-99-of-development.md"}
{"title": "Basic patterns for 99% of development", "heading": "When to Use Strategy (sliding 1)", "chunk": "When you have multiple algorithms that can be swapped out at runtime. When you want to eliminate conditional logic by encapsulating related behaviors.", "tags": ["Development"], "category": "", "path": "../_posts/2024-04-27-basic-patterns-for-99-of-development.md"}
{"title": "Basic patterns for 99% of development", "heading": "Drawbacks (sliding 1)", "chunk": "- It may introduce additional classes or functions, which could feel like over-engineering for very simple cases. - Managing many small strategy classes can become cumbersome if not organized well.", "tags": ["Development"], "category": "", "path": "../_posts/2024-04-27-basic-patterns-for-99-of-development.md"}
{"title": "Basic patterns for 99% of development", "heading": "What is it? (sliding 1)", "chunk": "The Builder pattern is ideal for constructing objects that require multiple steps or have many optional properties. It separates the construction of a complex object from its representation.", "tags": ["Development"], "category": "", "path": "../_posts/2024-04-27-basic-patterns-for-99-of-development.md"}
{"title": "Basic patterns for 99% of development", "heading": "Before: Telescoping Constructors and Object Literals (sliding 1)", "chunk": "Consider creating a User object with several optional properties. Without a builder, you might have a long constructor or an object literal with many optional fields:\n\n```typescript\n// Using a constructor with many optional parameters\nclass User {\n  constructor(\n    public firstName: string,\n    public lastName: string,\n    public age? : number,\n    public email? : string,\n    public address? : string\n  ) {}\n}\n\nconst user1 = new User(\"John\", \"Doe\", 30, \"john@example.com\", \"123 Main St\");\n```\n\nAs more properties are added, the constructor becomes hard to maintain and error-prone.", "tags": ["Development"], "category": "", "path": "../_posts/2024-04-27-basic-patterns-for-99-of-development.md"}
{"title": "Basic patterns for 99% of development", "heading": "After: Using the Builder Pattern (sliding 1)", "chunk": "A builder provides a fluent interface to set only the fields you need:\n\n```typescript\nclass User {\n  firstName! : string;\n  lastName! : string;\n  age? : number;\n  email? : string;\n  address? : string;\n}\n\nclass UserBuilder {\n  private user: User = new User();\n\n  setFirstName(firstName: string): UserBuilder {\n    this.user.firstName = firstName;\n    return this;\n  }\n\n  setLastName(lastName: string): UserBuilder {\n    this.user.lastName = lastName;\n    return this;\n  }\n\n  setAge(age: number): UserBuilder {\n    this.user.age = age;\n    return this;\n  }\n\n  setEmail(email: string): UserBuilder {\n    this.user.email = email;\n    return this;\n  }\n\n  setAddress(address: string): UserBuilder {\n    this.user.address = address;\n    return this;\n  }\n\n  build(): User {\n    return this.user;\n  }\n}\n\n// Usage\nconst user2 = new UserBuilder()\n  .setFirstName(\"Jane\")\n  .setLastName(\"Doe\")\n  .setEmail(\"jane@example.com\")\n  .build();\n\nconsole.log(user2);\n```", "tags": ["Development"], "category": "", "path": "../_posts/2024-04-27-basic-patterns-for-99-of-development.md"}
{"title": "Basic patterns for 99% of development", "heading": "When to Use Builder (sliding 1)", "chunk": "- When creating objects with many optional or configurable properties. - When you want to provide a clear, readable way of assembling complex objects.", "tags": ["Development"], "category": "", "path": "../_posts/2024-04-27-basic-patterns-for-99-of-development.md"}
{"title": "Basic patterns for 99% of development", "heading": "Drawbacks (sliding 1)", "chunk": "- Introduces an extra layer of abstraction, which might be unnecessary for simple objects. - In some cases, functional approaches (like using object spread) might suffice, though a builder can improve clarity when there are many configuration steps.", "tags": ["Development"], "category": "", "path": "../_posts/2024-04-27-basic-patterns-for-99-of-development.md"}
{"title": "Basic patterns for 99% of development", "heading": "Final Thoughts (sliding 1)", "chunk": "In practice, Strategy and Builder patterns cover most of our development needs\u2014they help clean up conditional logic and improve the clarity of object construction. While there are other valuable patterns that can be a good fit in some scenarios with complex instantiation rules, overusing them can add unnecessary layers of abstraction. By understanding these patterns and knowing when to apply them, you can write code that's not only easier to maintain but also more adaptable to change\u2014no matter if you lean towards a functional style or an OOP approach.", "tags": ["Development"], "category": "", "path": "../_posts/2024-04-27-basic-patterns-for-99-of-development.md"}
{"title": "cURL: Validating TLS versions", "heading": "Introduction (sliding 1)", "chunk": "I had to demonstrate that our hosting of a single page app did not accept TLS version 1.1,\n\nThis is the proof\n\n```:bash\ncurl -o /dev/null -s -w \"%{http_code}\\n\" https://koala-moon.com --insecure --tls-max 1.1\n```\n\nReturns: 0000\n\n```:bash\ncurl -o /dev/null -s -w \"%{http_code}\\n\" https://koala-moon.com --insecure --tls-max 1.2\n```\n\nReturns: 200\n\n_Easy eh?_", "tags": ["Development"], "category": "", "path": "../_posts/2025-03-12-validating-tls-versions.md"}
{"title": "Deterministic Randomness & Shuffling with Seeds", "heading": "Introduction (sliding 1)", "chunk": "TL;DR **Problem:** How do we shuffle an array randomly but repeatedly (same seed = same order)? - **Solution:** Use a pseudorandom number generator (PRNG) to generate consistent randomness.", "tags": ["code"], "category": "", "path": "../_posts/2025-03-12-deterministic-randomness-shuffling-with-seeds.md"}
{"title": "Deterministic Randomness & Shuffling with Seeds", "heading": "Requirements & Motivation (sliding 1)", "chunk": "In many real-world applications, we need randomized but repeatable results. This is particularly useful in:\n\n- Shuffling arrays predictably (e.g., ordering test questions the same way for all users with the same seed). - Procedural generation in games (e.g., generating maps, terrain, or enemy placement). - Consistent randomized behaviour in experiments. To achieve this, we need:\n\n1. A pseudorandom number generator (PRNG) that produces the same sequence of numbers given the same seed. 2. A deterministic shuffle function that uses the PRNG to sort an array in a predictable but randomized way.", "tags": ["code"], "category": "", "path": "../_posts/2025-03-12-deterministic-randomness-shuffling-with-seeds.md"}
{"title": "Deterministic Randomness & Shuffling with Seeds", "heading": "What is a PRNG (PseudoRandom Number Generator)? (sliding 1)", "chunk": "A pseudorandom number generator (PRNG) is an algorithm that generates a sequence of numbers that appear random but are entirely predictable if you know the starting point (seed). PRNGs are commonly used in:\n\n- Simulations\n- Cryptography (though LCGs are not cryptographically secure)\n- Games and procedural content generation", "tags": ["code"], "category": "", "path": "../_posts/2025-03-12-deterministic-randomness-shuffling-with-seeds.md"}
{"title": "Deterministic Randomness & Shuffling with Seeds", "heading": "What is an LCG (Linear Congruential Generator)? (sliding 1)", "chunk": "An LCG is one of the simplest types of PRNGs. It generates numbers using the recurrence relation:\n\n> X<sub>n+1</sub> = (a \u22c5 X<sub>n</sub> + c) mod m\n\nWhere:\n\n- **X<sub>n</sub>** = the current state (initialized with the seed)\n- **a** = multiplier (a carefully chosen constant)\n- **c** = increment (another well-chosen constant)\n- **m** = modulus (defines the number range)\n\nThis ensures that:\n\n- Numbers stay within a bounded range (0 to m - 1). - The sequence eventually repeats after m numbers. - The output is deterministic (same seed = same sequence).", "tags": ["code"], "category": "", "path": "../_posts/2025-03-12-deterministic-randomness-shuffling-with-seeds.md"}
{"title": "Deterministic Randomness & Shuffling with Seeds", "heading": "Step 1: Create a Seeded PRNG (LCG Implementation) (sliding 1)", "chunk": "```javascript\nconst seededRandom = (seed: number) => {\n  const m = 2 ** 32; // Modulus: ensures numbers stay in a 32-bit range\n  const a = 1664525; // Multiplier: chosen for good randomness\n  const c = 1013904223; // Increment: another well-chosen constant\n  let state = seed; // Initialize state with seed\n\n  return function () {\n    state = (a * state + c) % m; // Update state using LCG formula\n    return state / m; // Normalize to a number between 0 and 1\n  };\n};\n```\n\n- The same seed always produces the same sequence. - Different seeds result in different sequences. - This approach is simple and lightweight.", "tags": ["code"], "category": "", "path": "../_posts/2025-03-12-deterministic-randomness-shuffling-with-seeds.md"}
{"title": "Deterministic Randomness & Shuffling with Seeds", "heading": "Step 2: Shuffle an Array Using the PRNG (sliding 1)", "chunk": "```javascript\nconst shuffleArrayWithSeed = <T>(array: T[], seed: number): T[] => {\n  const rng = seededRandom(seed); // Create PRNG instance\n\n  return array\n    .map((item) => ({ item, random: rng() })) // Assign a random number\n    .sort((a, b) => a.random - b.random) // Sort based on the random number\n    .map((obj) => obj.item); // Extract the shuffled items\n};\n```\n\n- Deterministic Shuffling: The same seed produces the same shuffled order. - Generics: Works with any array type.", "tags": ["code"], "category": "", "path": "../_posts/2025-03-12-deterministic-randomness-shuffling-with-seeds.md"}
{"title": "Deterministic Randomness & Shuffling with Seeds", "heading": "Testing the Implementation (sliding 1)", "chunk": "To verify correctness, we must:\n\n- Ensure seededRandom(seed) always produces the same sequence for a given seed. - Ensure shuffleArrayWithSeed(array, seed) returns:\n- The same order for the same seed. - A different order for a different seed. - The same elements as the original array.", "tags": ["code"], "category": "", "path": "../_posts/2025-03-12-deterministic-randomness-shuffling-with-seeds.md"}
{"title": "Deterministic Randomness & Shuffling with Seeds", "heading": "Test Cases (sliding 1)", "chunk": "```:javascript\nimport { describe, expect, it } from '@jest/globals';\nimport { seededRandom, shuffleArrayWithSeed } from '../utils/random';\n\ndescribe('seededRandom', () => {\n  it('should generate the same sequence for the same seed', () => {\n    const rng1 = seededRandom(42);\n    const rng2 = seededRandom(42);\n\n    expect(rng1()).toBe(rng2());\n    expect(rng1()).toBe(rng2());\n  });\n\n  it('should generate different sequences for different seeds', () => {\n    const rng1 = seededRandom(42);\n    const rng2 = seededRandom(69);\n\n    expect(rng1()).not.toBe(rng2());\n  });\n});\n\ndescribe('shuffleArrayWithSeed', () => {\n  it('should return the same shuffled order for the same seed', () => {\n    const arr = [1, 2, 3, 4, 5];\n\n    const shuffled1 = shuffleArrayWithSeed(arr, 42);\n    const shuffled2 = shuffleArrayWithSeed(arr, 42);\n\n    expect(shuffled1).toEqual(shuffled2);\n  });\n\n  it('should return different shuffled orders for different seeds', () => {\n    const arr = [1, 2, 3, 4, 5];\n\n    const shuffled1 = shuffleArrayWithSeed(arr, 42);\n    const shuffled2 = shuffleArrayWithSeed(arr, 69);\n\n    expect(shuffled1).not.toEqual(shuffled2);\n  });\n\n  it('should not modify the original array', () => {\n    const arr = [1, 2, 3, 4, 5];\n    const copy = [...arr];\n\n    shuffleArrayWithSeed(arr, 42);\n\n    expect(arr).toEqual(copy);\n  });\n\n  it('should contain the same elements after shuffling', () => {\n    const arr = [1, 2, 3, 4, 5];\n\n    const shuffled = shuffleArrayWithSeed(arr, 42);\n\n    expect(new Set(shuffled)).toEqual(new Set(arr));\n  });\n});\n```", "tags": ["code"], "category": "", "path": "../_posts/2025-03-12-deterministic-randomness-shuffling-with-seeds.md"}
{"title": "Deterministic Randomness & Shuffling with Seeds", "heading": "Final Thoughts (sliding 1)", "chunk": "_This isn\u2019t just a coding challenge\u2014it\u2019s a real engineering problem._\n\nUnlike many algorithmic puzzles, real-world applications need repeatability. This deterministic shuffle:\n\n- Ensures Fairness: For example, in randomized surveys where each participant gets the same order for a given seed. - Aids Debugging: You can reproduce random behavior exactly. - Supports Procedural Generation: Useful in games, AI-generated maps, etc.", "tags": ["code"], "category": "", "path": "../_posts/2025-03-12-deterministic-randomness-shuffling-with-seeds.md"}
{"title": "Deterministic Randomness & Shuffling with Seeds", "heading": "_PS. Is this the only way to do this?_ (sliding 1)", "chunk": "No. While the LCG (Linear Congruential Generator) is a simple and efficient way to achieve deterministic randomness, other methods include:\n\n- Xorshift: Offers better randomness while remaining lightweight. - Hash-based PRNG: Allows seeding from strings (e.g., usernames). - PCG: Provides higher-quality randomness. - Mersenne Twister: Suitable for scientific simulations or AI, though it might be overkill. - CSPRNG: Use for security-critical randomness (via crypto modules). Deterministic randomness is a powerful tool for ensuring consistent behavior in systems that require repeatable randomization. Choose the method that best fits your application's needs and be mindful of the trade-offs between simplicity and randomness quality.", "tags": ["code"], "category": "", "path": "../_posts/2025-03-12-deterministic-randomness-shuffling-with-seeds.md"}
{"title": "Generative AI: Powerful Imitation, Not True Intelligence", "heading": "Disclaimer (sliding 1)", "chunk": "I\u2019m not a Luddite. I use generative AI in both my personal and professional life, and I find the field genuinely fascinating. I can even see myself working more in this space\u2014it\u2019s exciting and full of potential. That said, perhaps it\u2019s my age or just experience, but I remain cautious about the hype and the speed at which governments and businesses are embracing this technology. If history teaches us anything, it\u2019s that the way new technology is introduced and sold often differs significantly from how it ultimately plays out. I'm particularly skeptical of the bold promises being made\u2014many of which seem more aligned with sales pitches and investor appeal than with the current, grounded capabilities of the tools themselves.", "tags": ["Development", "AI"], "category": "", "path": "../_posts/2025-03-21-generative-ai-powerful-imitation-not-true-intelligence.md"}
{"title": "Generative AI: Powerful Imitation, Not True Intelligence", "heading": "What it is (and isn\u2019t) (sliding 1)", "chunk": "Generative AI models like ChatGPT are **next-token predictors**. They don\u2019t _know_, _understand_, or _reason_\u2014they generate likely responses based on patterns in massive datasets. _They are mathematical engines of mimicry\u2014not minds, not magic._\n\n---", "tags": ["Development", "AI"], "category": "", "path": "../_posts/2025-03-21-generative-ai-powerful-imitation-not-true-intelligence.md"}
{"title": "Generative AI: Powerful Imitation, Not True Intelligence", "heading": "\u26a1 Energy, Cost, and Limits (sliding 1)", "chunk": "- Training large models requires **enormous energy** and **financial investment**\n- Running them at scale involves **huge infrastructure and carbon footprint**\n- As models get bigger, we see **diminishing returns**:\n  - More data + compute \u2260 more intelligence\n  - Improvements are incremental, not revolutionary\n\n---", "tags": ["Development", "AI"], "category": "", "path": "../_posts/2025-03-21-generative-ai-powerful-imitation-not-true-intelligence.md"}
{"title": "Generative AI: Powerful Imitation, Not True Intelligence", "heading": "\ud83d\udea7 Are We Hitting a Wall? (sliding 1)", "chunk": "GenAI is incredibly useful\u2014but it may not lead to real understanding or _Artificial General Intelligence (AGI)_. **If more data and more compute aren\u2019t the answer\u2014what is? **\n\n---", "tags": ["Development", "AI"], "category": "", "path": "../_posts/2025-03-21-generative-ai-powerful-imitation-not-true-intelligence.md"}
{"title": "Generative AI: Powerful Imitation, Not True Intelligence", "heading": "\ud83c\udf31 Alternative Approaches: Beyond Token Prediction (sliding 1)", "chunk": "| Approach                       | Description                                                 | Why it matters                                          |\n| ------------------------------ | ----------------------------------------------------------- | ------------------------------------------------------- |\n| \ud83e\udde0 **Hybrid AI**               | Combines statistical models with logic/rule-based reasoning | Enables better memory, planning, and structured thought |\n| \ud83c\udf3f **Neuromorphic Computing**  | Brain-inspired hardware using neuron-like spikes            | Promises lower energy use and organic learning          |\n| \ud83e\uddd2 **Developmental AI**        | Learns like a child\u2014through experience, not pretraining     | Allows for real-time adaptation and grounding           |\n| \ud83e\udd16 **Cognitive Architectures** | Simulates attention, memory, reasoning                      | Aims to mimic how minds actually work                   |\n| \ud83d\udc1d **Swarm/Collective AI**     | Intelligence emerges from many interacting agents           | Inspired by nature\u2019s decentralized problem solving      |\n| \ud83e\uddec **Bio-Integrated AI**       | Uses biology (DNA, neurons) to compute                      | Still early, but could be revolutionary                 |\n\n---", "tags": ["Development", "AI"], "category": "", "path": "../_posts/2025-03-21-generative-ai-powerful-imitation-not-true-intelligence.md"}
{"title": "Generative AI: Powerful Imitation, Not True Intelligence", "heading": "\ud83d\udca1 A Better Path Forward? (sliding 1)", "chunk": "> \u201cGenerative AI is a brilliant mimic, not a mind. > Future intelligence may emerge not from more data, but from better design\u2014grounded, interactive, and maybe even organic.\u201d", "tags": ["Development", "AI"], "category": "", "path": "../_posts/2025-03-21-generative-ai-powerful-imitation-not-true-intelligence.md"}
{"title": "Development questions", "heading": "Introduction (sliding 1)", "chunk": "I\u2019ve been working on compiling a set of questions we ask at the outset of each new feature. In my experience, teams can become laser-focused on coding and implementation without considering the broader context. It\u2019s crucial to ask the right questions early on to demonstrate the value of our work and align it with both technical requirements and organizational objectives. For every new feature, consider the following aspects and questions. The responses can help inform the creation of tickets and detailed specifications. | **Aspect** | **Questions** |\n| --------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| **Top Level User Story** | - What is the main objective or goal of this feature/change? |\n| **Security Concerns** | - Are there any potential security vulnerabilities or risks associated with this work? |\n| **Organizational Policies & Processes** | - Are there specific policies or processes that need to be followed during development? |\n| **Value Addition** | - How does this work enhance the application/product?<br>- What additional benefits or improvements does it bring? |\n| **Justification** | - Why is this work necessary or important?<br>- What problem or need does it address? |\n| **Proving Worth** | - How can we demonstrate the impact or value of this work?<br>- What criteria or metrics can be used to measure its success?", "tags": ["code"], "category": "", "path": "../_posts/2023-08-24-development-questions.md"}
{"title": "Development questions", "heading": "Introduction (sliding 2)", "chunk": "The responses can help inform the creation of tickets and detailed specifications. | **Aspect** | **Questions** |\n| --------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| **Top Level User Story** | - What is the main objective or goal of this feature/change? |\n| **Security Concerns** | - Are there any potential security vulnerabilities or risks associated with this work? |\n| **Organizational Policies & Processes** | - Are there specific policies or processes that need to be followed during development? |\n| **Value Addition** | - How does this work enhance the application/product?<br>- What additional benefits or improvements does it bring? |\n| **Justification** | - Why is this work necessary or important?<br>- What problem or need does it address? |\n| **Proving Worth** | - How can we demonstrate the impact or value of this work?<br>- What criteria or metrics can be used to measure its success? |\n| **Monitoring** | - What metrics or indicators can be used to track the performance or usage of this feature/change?<br>- How will we monitor its effectiveness over time? |\n| **Technical Requirements** | - Are there any specific technical constraints or dependencies that need to be considered?<br>- What technologies or frameworks should be utilized for this work? |\n| **User Experience (UX)** | - How will this work impact the user experience?<br>- Are there any usability considerations to be aware of?", "tags": ["code"], "category": "", "path": "../_posts/2023-08-24-development-questions.md"}
{"title": "Development questions", "heading": "Introduction (sliding 3)", "chunk": "|\n| **Value Addition** | - How does this work enhance the application/product?<br>- What additional benefits or improvements does it bring? |\n| **Justification** | - Why is this work necessary or important?<br>- What problem or need does it address? |\n| **Proving Worth** | - How can we demonstrate the impact or value of this work?<br>- What criteria or metrics can be used to measure its success? |\n| **Monitoring** | - What metrics or indicators can be used to track the performance or usage of this feature/change?<br>- How will we monitor its effectiveness over time? |\n| **Technical Requirements** | - Are there any specific technical constraints or dependencies that need to be considered?<br>- What technologies or frameworks should be utilized for this work? |\n| **User Experience (UX)** | - How will this work impact the user experience?<br>- Are there any usability considerations to be aware of? |\n| **Testing & Quality Assurance** | - What testing strategies will be employed to ensure the quality of the implementation?<br>- Are there any specific test cases or scenarios that need to be addressed? |\n| **Scalability & Performance** | - How will this work scale as the application grows?<br>- Are there any performance considerations or benchmarks to meet? |\n| **Documentation** | - What documentation needs to be created or updated as part of this work?<br>- How will knowledge transfer be facilitated for other team members?", "tags": ["code"], "category": "", "path": "../_posts/2023-08-24-development-questions.md"}
{"title": "Development questions", "heading": "Introduction (sliding 4)", "chunk": "|\n| **Monitoring** | - What metrics or indicators can be used to track the performance or usage of this feature/change?<br>- How will we monitor its effectiveness over time? |\n| **Technical Requirements** | - Are there any specific technical constraints or dependencies that need to be considered?<br>- What technologies or frameworks should be utilized for this work? |\n| **User Experience (UX)** | - How will this work impact the user experience?<br>- Are there any usability considerations to be aware of? |\n| **Testing & Quality Assurance** | - What testing strategies will be employed to ensure the quality of the implementation?<br>- Are there any specific test cases or scenarios that need to be addressed? |\n| **Scalability & Performance** | - How will this work scale as the application grows?<br>- Are there any performance considerations or benchmarks to meet? |\n| **Documentation** | - What documentation needs to be created or updated as part of this work?<br>- How will knowledge transfer be facilitated for other team members? |\n| **Deployment & Rollout** | - What is the deployment plan for this work?<br>- Are there any rollout or release strategies to consider? |\n| **Feedback & Iteration** | - How will feedback be collected and incorporated into future iterations?<br>- What mechanisms are in place for continuous improvement?", "tags": ["code"], "category": "", "path": "../_posts/2023-08-24-development-questions.md"}
{"title": "Development questions", "heading": "Introduction (sliding 5)", "chunk": "|\n| **Testing & Quality Assurance** | - What testing strategies will be employed to ensure the quality of the implementation?<br>- Are there any specific test cases or scenarios that need to be addressed? |\n| **Scalability & Performance** | - How will this work scale as the application grows?<br>- Are there any performance considerations or benchmarks to meet? |\n| **Documentation** | - What documentation needs to be created or updated as part of this work?<br>- How will knowledge transfer be facilitated for other team members? |\n| **Deployment & Rollout** | - What is the deployment plan for this work?<br>- Are there any rollout or release strategies to consider? |\n| **Feedback & Iteration** | - How will feedback be collected and incorporated into future iterations?<br>- What mechanisms are in place for continuous improvement? |\n| **Collaboration & Communication** | - How will communication be maintained between team members and stakeholders throughout the process?<br>- Are there any collaboration tools or platforms to be used? |\n| **Risk Management** | - What potential risks or challenges could arise during implementation, and how will they be mitigated?<br>- Is there a contingency plan in place for unexpected issues? |", "tags": ["code"], "category": "", "path": "../_posts/2023-08-24-development-questions.md"}
{"title": "Post: Standard", "heading": "Introduction (sliding 1)", "chunk": "All children, except one, grow up. They soon know that they will grow up, and the way Wendy knew was this. One day when she was two years old she was playing in a garden, and she plucked another flower and ran with it to her mother. I suppose she must have looked rather delightful, for Mrs. Darling put her hand to her heart and cried, \"Oh, why can't you remain like this for ever!\" This was all that passed between them on the subject, but henceforth Wendy knew that she must grow up. You always know after you are two. Two is the beginning of the end. Mrs. Darling first heard of Peter when she was tidying up her children's minds. It is the nightly custom of every good mother after her children are asleep to rummage in their minds and put things straight for next morning, repacking into their proper places the many articles that have wandered during the day. <!--more-->\n\nThis post has a manual excerpt `<!--more-->` set after the second paragraph. The following YAML Front Matter has also be applied:\n\n```yaml\nexcerpt_separator: \"<!--more-->\"\n```\n\nIf you could keep awake (but of course you can't) you would see your own mother doing this, and you would find it very interesting to watch her. It is quite like tidying up drawers.", "tags": ["Post Formats", "readability", "standard"], "category": "", "path": "../_posts/__2010-01-07-post-standard.md"}
{"title": "Post: Standard", "heading": "Introduction (sliding 2)", "chunk": "This was all that passed between them on the subject, but henceforth Wendy knew that she must grow up. You always know after you are two. Two is the beginning of the end. Mrs. Darling first heard of Peter when she was tidying up her children's minds. It is the nightly custom of every good mother after her children are asleep to rummage in their minds and put things straight for next morning, repacking into their proper places the many articles that have wandered during the day. <!--more-->\n\nThis post has a manual excerpt `<!--more-->` set after the second paragraph. The following YAML Front Matter has also be applied:\n\n```yaml\nexcerpt_separator: \"<!--more-->\"\n```\n\nIf you could keep awake (but of course you can't) you would see your own mother doing this, and you would find it very interesting to watch her. It is quite like tidying up drawers. You would see her on her knees, I expect, lingering humorously over some of your contents, wondering where on earth you had picked this thing up, making discoveries sweet and not so sweet, pressing this to her cheek as if it were as nice as a kitten, and hurriedly stowing that out of sight.", "tags": ["Post Formats", "readability", "standard"], "category": "", "path": "../_posts/__2010-01-07-post-standard.md"}
{"title": "Post: Standard", "heading": "Introduction (sliding 3)", "chunk": "<!--more-->\n\nThis post has a manual excerpt `<!--more-->` set after the second paragraph. The following YAML Front Matter has also be applied:\n\n```yaml\nexcerpt_separator: \"<!--more-->\"\n```\n\nIf you could keep awake (but of course you can't) you would see your own mother doing this, and you would find it very interesting to watch her. It is quite like tidying up drawers. You would see her on her knees, I expect, lingering humorously over some of your contents, wondering where on earth you had picked this thing up, making discoveries sweet and not so sweet, pressing this to her cheek as if it were as nice as a kitten, and hurriedly stowing that out of sight. When you wake in the morning, the naughtiness and evil passions with which you went to bed have been folded up small and placed at the bottom of your mind and on the top, beautifully aired, are spread out your prettier thoughts, ready for you to put on. I don't know whether you have ever seen a map of a person's mind. Doctors sometimes draw maps of other parts of you, and your own map can become intensely interesting, but catch them trying to draw a map of a child's mind, which is not only confused, but keeps going round all the time.", "tags": ["Post Formats", "readability", "standard"], "category": "", "path": "../_posts/__2010-01-07-post-standard.md"}
{"title": "Post: Standard", "heading": "Introduction (sliding 4)", "chunk": "It is quite like tidying up drawers. You would see her on her knees, I expect, lingering humorously over some of your contents, wondering where on earth you had picked this thing up, making discoveries sweet and not so sweet, pressing this to her cheek as if it were as nice as a kitten, and hurriedly stowing that out of sight. When you wake in the morning, the naughtiness and evil passions with which you went to bed have been folded up small and placed at the bottom of your mind and on the top, beautifully aired, are spread out your prettier thoughts, ready for you to put on. I don't know whether you have ever seen a map of a person's mind. Doctors sometimes draw maps of other parts of you, and your own map can become intensely interesting, but catch them trying to draw a map of a child's mind, which is not only confused, but keeps going round all the time.", "tags": ["Post Formats", "readability", "standard"], "category": "", "path": "../_posts/__2010-01-07-post-standard.md"}
{"title": "Post: Standard", "heading": "Introduction (sliding 5)", "chunk": "I don't know whether you have ever seen a map of a person's mind. Doctors sometimes draw maps of other parts of you, and your own map can become intensely interesting, but catch them trying to draw a map of a child's mind, which is not only confused, but keeps going round all the time. There are zigzag lines on it, just like your temperature on a card, and these are probably roads in the island, for the Neverland is always more or less an island, with astonishing splashes of colour here and there, and coral reefs and rakish-looking craft in the offing, and savages and lonely lairs, and gnomes who are mostly tailors, and caves through which a river runs, and princes with six elder brothers, and a hut fast going to decay, and one very small old lady with a hooked nose. It would be an easy map if that were all, but there is also first day at school, religion, fathers, the round pond, needle-work, murders, hangings, verbs that take the dative, chocolate pudding day, getting into braces, say ninety-nine, three-pence for pulling out your tooth yourself, and so on, and either these are part of the island or they are another map showing through, and it is all rather confusing, especially as nothing will stand still. Of course the Neverlands vary a good deal.", "tags": ["Post Formats", "readability", "standard"], "category": "", "path": "../_posts/__2010-01-07-post-standard.md"}
{"title": "Post: Standard", "heading": "Introduction (sliding 6)", "chunk": "It would be an easy map if that were all, but there is also first day at school, religion, fathers, the round pond, needle-work, murders, hangings, verbs that take the dative, chocolate pudding day, getting into braces, say ninety-nine, three-pence for pulling out your tooth yourself, and so on, and either these are part of the island or they are another map showing through, and it is all rather confusing, especially as nothing will stand still. Of course the Neverlands vary a good deal. John's, for instance, had a lagoon with flamingoes flying over it at which John was shooting, while Michael, who was very small, had a flamingo with lagoons flying over it. John lived in a boat turned upside down on the sands, Michael in a wigwam, Wendy in a house of leaves deftly sewn together. John had no friends, Michael had friends at night, Wendy had a pet wolf forsaken by its parents, but on the whole the Neverlands have a family resemblance, and if they stood still in a row you could say of them that they have each other's nose, and so forth. On these magic shores children at play are for ever beaching their coracles [simple boat]. We too have been there; we can still hear the sound of the surf, though we shall land no more.", "tags": ["Post Formats", "readability", "standard"], "category": "", "path": "../_posts/__2010-01-07-post-standard.md"}
{"title": "Post: Standard", "heading": "Introduction (sliding 7)", "chunk": "Of course the Neverlands vary a good deal. John's, for instance, had a lagoon with flamingoes flying over it at which John was shooting, while Michael, who was very small, had a flamingo with lagoons flying over it. John lived in a boat turned upside down on the sands, Michael in a wigwam, Wendy in a house of leaves deftly sewn together. John had no friends, Michael had friends at night, Wendy had a pet wolf forsaken by its parents, but on the whole the Neverlands have a family resemblance, and if they stood still in a row you could say of them that they have each other's nose, and so forth. On these magic shores children at play are for ever beaching their coracles [simple boat]. We too have been there; we can still hear the sound of the surf, though we shall land no more. Of all delectable islands the Neverland is the snuggest and most compact, not large and sprawly, you know, with tedious distances between one adventure and another, but nicely crammed. When you play at it by day with the chairs and table-cloth, it is not in the least alarming, but in the two minutes before you go to sleep it becomes very real. That is why there are night-lights. Occasionally in her travels through her children's minds Mrs.", "tags": ["Post Formats", "readability", "standard"], "category": "", "path": "../_posts/__2010-01-07-post-standard.md"}
{"title": "Post: Standard", "heading": "Introduction (sliding 8)", "chunk": "John had no friends, Michael had friends at night, Wendy had a pet wolf forsaken by its parents, but on the whole the Neverlands have a family resemblance, and if they stood still in a row you could say of them that they have each other's nose, and so forth. On these magic shores children at play are for ever beaching their coracles [simple boat]. We too have been there; we can still hear the sound of the surf, though we shall land no more. Of all delectable islands the Neverland is the snuggest and most compact, not large and sprawly, you know, with tedious distances between one adventure and another, but nicely crammed. When you play at it by day with the chairs and table-cloth, it is not in the least alarming, but in the two minutes before you go to sleep it becomes very real. That is why there are night-lights. Occasionally in her travels through her children's minds Mrs. Darling found things she could not understand, and of these quite the most perplexing was the word Peter. She knew of no Peter, and yet he was here and there in John and Michael's minds, while Wendy's began to be scrawled all over with him. The name stood out in bolder letters than any of the other words, and as Mrs. Darling gazed she felt that it had an oddly cocky appearance.", "tags": ["Post Formats", "readability", "standard"], "category": "", "path": "../_posts/__2010-01-07-post-standard.md"}
{"title": "Google email address", "heading": "Introduction (sliding 1)", "chunk": "# Falsehoods Programmers Believe About Email\n\nOne fascinating example is how **Gmail ignores interior periods** in email addresses. For instance, addresses like:\n\n- `foobar@gmail.com`\n- `foo.bar@gmail.com`\n- `f.o.oba.r@gmail.com`\n\nall route to the same inbox. This quirk challenges the common assumption that every dot matters in email addresses. The article \"[Falsehoods Programmers Believe About Email](https://beesbuzz.biz/code/439-Falsehoods-programmers-believe-about-email)\" does an excellent job of debunking various myths developers have about email handling. It highlights several key points, including:\n\n- **Uniqueness Misconception:** Email addresses might seem like unique identifiers, but services like Gmail treat them differently by ignoring dots (and also the part after a plus sign). - **Case Sensitivity:** While domain names are case-insensitive, the local part of an email address can be case sensitive\u2014though many providers ignore case differences. - **Formatting Flexibility:** Email addresses can include characters that programmers often overlook, leading to bugs when validating or normalizing emails. This article is a great reminder that assumptions about email formats can lead to unexpected issues in software design, and it emphasizes the need for thorough testing and understanding of how different email providers handle addresses. In short, the Gmail dots example is just one of many lessons\u2014it's a powerful prompt for developers to question their assumptions and design systems that accommodate real-world behaviors.", "tags": ["Development"], "category": "", "path": "../_posts/2023-11-04-google-email-address.md"}
{"title": "Adapting NASA\u2019s \u201cPower of 10\u201d Rules for Modern JS/TS Development", "heading": "Introduction (sliding 1)", "chunk": "# DRAFT\n\nModern JavaScript and TypeScript projects can benefit from NASA/JPL\u2019s _Power of 10_ coding rules \u2013 originally created for C in safety-critical systems \u2013 by adapting them to fit today\u2019s development practices. The goal is to keep code safe, maintainable, and performant without slowing development. Each rule below is rewritten for JS/TS/Node, with an explanation of **why it matters** and examples of **how to apply it**, emphasizing automation-friendly guidelines for code reviews and tools.", "tags": ["Development"], "category": "", "path": "../_posts/2025-03-31-power-of-10.md"}
{"title": "Adapting NASA\u2019s \u201cPower of 10\u201d Rules for Modern JS/TS Development", "heading": "1. Keep Control Flow Simple (Avoid Complex Constructs) (sliding 1)", "chunk": "**Adapted Rule:** Use straightforward control structures and avoid overly complex flow. In JavaScript/TypeScript this means no equivalent of `goto` (avoid label/break trickery) and use recursion sparingly. Favour simple loops, early returns, and small functions over deeply nested logic. **Rationale:** Eliminating \u201cunstructured\u201d flow makes the code easier to read and less error-prone. Deep recursion in JS can lead to stack overflow. Simple flow aids understanding and tool analysis. **Examples:**\n\n```ts\n// Bad: deeply nested\nfunction process(data) {\n  if (data) {\n    if (data.valid) {\n      if (!data.done) {\n        // ... logic ...\n      }\n    }\n  }\n}\n\n// Good: early returns\nfunction process(data) {\n  if (!data || !data.valid || data.done) return;\n  // ... main logic ...\n}\n```", "tags": ["Development"], "category": "", "path": "../_posts/2025-03-31-power-of-10.md"}
{"title": "Adapting NASA\u2019s \u201cPower of 10\u201d Rules for Modern JS/TS Development", "heading": "2. Ensure Loops Have Bounded Iteration (No Runaway Loops) (sliding 1)", "chunk": "**Adapted Rule:** All loops should have a clear, fixed limit or termination condition. **Rationale:** Prevent infinite loops that can block the UI or event loop in Node. Bounded loops make behaviour and performance predictable. **Examples:**\n\n```ts\n// Bad: potentially infinite\nwhile (!jobDone) {\n  checkStatus();\n}\n\n// Good: bounded\nlet attempts = 0;\nconst MAX_ATTEMPTS = 1000;\nwhile (!jobDone && attempts < MAX_ATTEMPTS) {\n  checkStatus();\n  attempts++;\n}\n```", "tags": ["Development"], "category": "", "path": "../_posts/2025-03-31-power-of-10.md"}
{"title": "Adapting NASA\u2019s \u201cPower of 10\u201d Rules for Modern JS/TS Development", "heading": "3. Manage Memory and Resources Prudently (Avoid Unbounded Allocation) (sliding 1)", "chunk": "**Adapted Rule:** Avoid unbounded memory growth. JS uses garbage collection, but design code to limit memory use. **Rationale:** Prevent slowdowns and crashes. Especially critical in long-running Node processes or browsers. **Examples:**\n\n```ts\n// Bad: read entire large file\nconst data = fs.readFileSync(\"hugefile.txt\");\n\n// Good: stream the file\nconst stream = fs.createReadStream(\"hugefile.txt\");\nstream.on(\"data\", (chunk) => {\n  // process chunk\n});\n```", "tags": ["Development"], "category": "", "path": "../_posts/2025-03-31-power-of-10.md"}
{"title": "Adapting NASA\u2019s \u201cPower of 10\u201d Rules for Modern JS/TS Development", "heading": "4. Keep Functions Small and Focused (sliding 1)", "chunk": "**Adapted Rule:** Keep functions under 50-60 lines. Each should do one thing well. **Rationale:** Easier to understand, test, and review. Supports the single responsibility principle. **Examples:**\n\n```ts\n// Better: refactor into clear steps\nfunction processOrder(order) {\n  validateOrder(order);\n  chargePayment(order);\n  updateInventory(order);\n  notifyUser(order);\n}\n```", "tags": ["Development"], "category": "", "path": "../_posts/2025-03-31-power-of-10.md"}
{"title": "Adapting NASA\u2019s \u201cPower of 10\u201d Rules for Modern JS/TS Development", "heading": "5. Validate Inputs and Assumptions with Runtime Checks (sliding 1)", "chunk": "**Adapted Rule:** Include validations/assertions in functions, especially for critical inputs and outputs. **Rationale:** Prevent subtle bugs by catching incorrect usage or bad data early. **Examples:**\n\n```ts\nfunction getUserProfile(userId: string) {\n  if (typeof userId !== \"string\") {\n    throw new TypeError(\"Expected userId to be a string\");\n  }\n}\n\n// Exhaustive type checking\nfunction handleStatus(status: \"ok\" | \"fail\") {\n  if (status === \"ok\") return;\n  if (status === \"fail\") return;\n  const _exhaustive: never = status;\n  throw new Error(`Unhandled status: ${status}`);\n}\n```", "tags": ["Development"], "category": "", "path": "../_posts/2025-03-31-power-of-10.md"}
{"title": "Adapting NASA\u2019s \u201cPower of 10\u201d Rules for Modern JS/TS Development", "heading": "6. Minimize Scope and Shared Mutable State (sliding 1)", "chunk": "**Adapted Rule:** Limit variables to their smallest needed scope. Avoid globally shared mutable state. **Rationale:** Reduces complexity and accidental side-effects. Makes code easier to reason about and garbage collect. **Examples:**\n\n```ts\n// Good: limited scope\nfunction sum(arr: number[]) {\n  let total = 0;\n  for (let i = 0; i < arr.length; i++) {\n    total += arr[i];\n  }\n  return total;\n}\n```", "tags": ["Development"], "category": "", "path": "../_posts/2025-03-31-power-of-10.md"}
{"title": "Adapting NASA\u2019s \u201cPower of 10\u201d Rules for Modern JS/TS Development", "heading": "7. Handle All Return Values and Errors (sliding 1)", "chunk": "**Adapted Rule:** Always handle return values from functions, or clearly indicate when intentionally ignored. **Rationale:** Prevent missed errors or logic failures. **Examples:**\n\n```ts\n// Bad: ignoring promise\ndoSomethingAsync();\n\n// Good: await or catch\nawait doSomethingAsync();\n\n// Or:\ndoSomethingAsync().catch((err) => console.error(err));\n```", "tags": ["Development"], "category": "", "path": "../_posts/2025-03-31-power-of-10.md"}
{"title": "Adapting NASA\u2019s \u201cPower of 10\u201d Rules for Modern JS/TS Development", "heading": "8. Use Meta-Programming Sparingly (Avoid `eval` and Hidden Magic) (sliding 1)", "chunk": "**Adapted Rule:** Avoid `eval`, dynamic code generation, and confusing meta-programming. **Rationale:** Hard to debug, insecure, and breaks tooling. **Examples:**\n\n```ts\n// Bad\neval(\"console.log('Hi')\");\n\n// Good\nconst fn = () => console.log(\"Hi\");\nfn();\n```", "tags": ["Development"], "category": "", "path": "../_posts/2025-03-31-power-of-10.md"}
{"title": "Adapting NASA\u2019s \u201cPower of 10\u201d Rules for Modern JS/TS Development", "heading": "9. Avoid Unnecessary Indirection and Side Effects (sliding 1)", "chunk": "**Adapted Rule:** Keep data flow and function calls direct. Avoid mutating inputs or creating layers of abstraction without value. **Rationale:** Reduces debugging pain and improves readability. **Examples:**\n\n```ts\n// Bad: mutates external object\nfunction addItem(list: string[], item: string) {\n  list.push(item);\n}\n\n// Good: returns new copy\nfunction addItem(list: string[], item: string) {\n  return [...list, item];\n}\n```", "tags": ["Development"], "category": "", "path": "../_posts/2025-03-31-power-of-10.md"}
{"title": "Adapting NASA\u2019s \u201cPower of 10\u201d Rules for Modern JS/TS Development", "heading": "10. Enable All Warnings and Fix Them (Use Your Tools) (sliding 1)", "chunk": "**Adapted Rule:** Turn on all relevant compiler and linter warnings, and fix them. **Rationale:** Prevents issues early and reinforces consistency. **Examples:**\n\n```json\n// tsconfig.json\n\"strict\": true,\n\"noUnusedLocals\": true,\n\"noImplicitReturns\": true\n```\n\n```js\n// .eslintrc.js\nmodule.exports = {\n rules: {\n \"no-unused-vars\": \"error\",\n \"no-eval\": \"error\",\n \"no-console\": \"warn\",\n },\n};\n```\n\n---\n\n**Conclusion:** These adapted rules provide a practical standard for large teams using JS/TS/Node. They promote clarity, safety, and consistency \u2014 and can be enforced through code review and automation. When used well, they reduce bugs, improve maintainability, and help build stakeholder confidence in your team's output.", "tags": ["Development"], "category": "", "path": "../_posts/2025-03-31-power-of-10.md"}
{"title": "try catch", "heading": "Introduction (sliding 1)", "chunk": "# Try and Catch with Typescript\n\n```:bash\ntry {\n // Do something that could throw an error\n} catch(error) {\n if (error instanceof Error) {\n // Do something. E.g. console.log(error.message)\n }\n}\n```", "tags": ["code", "typescript", "snippet"], "category": "", "path": "../_posts/2023-10-05-try-catch.md"}
{"title": "Post: Modified Date", "heading": "Introduction (sliding 1)", "chunk": "This post has been updated and should show a modified date if used in a layout. All children, except one, grow up. They soon know that they will grow up, and the way Wendy knew was this. One day when she was two years old she was playing in a garden, and she plucked another flower and ran with it to her mother. I suppose she must have looked rather delightful, for Mrs. Darling put her hand to her heart and cried, \"Oh, why can't you remain like this for ever!\" This was all that passed between them on the subject, but henceforth Wendy knew that she must grow up. You always know after you are two. Two is the beginning of the end.", "tags": ["Post Formats", "readability", "standard"], "category": "", "path": "../_posts/__2010-01-07-post-modified.md"}
{"title": "NPM Dependency Notation", "heading": "Introduction (sliding 1)", "chunk": "Dependency notation in the package.json file influences how npm handles version installations, and this affects whether npm install may update the package-lock.json file. Here\u2019s how it works based on different notations:", "tags": ["code", "npm", "nodejs"], "category": "", "path": "../_posts/2024-05-08-npm-dependency-notation.md"}
{"title": "NPM Dependency Notation", "heading": "Exact Version (\u201c4.19.2\u201d): (sliding 1)", "chunk": "**Notation:** \u201c4.19.2\u201d\n\n**Meaning:** Install exactly version 4.19.2 of the package. **Effect on npm install:**\n\n- When this version is specified, npm will always install version 4.19.2, regardless of whether newer minor or patch versions are available. The package-lock.json will not be updated unless you manually change the version in package.json. Example: If version 4.19.3 is available, npm will not install it.", "tags": ["code", "npm", "nodejs"], "category": "", "path": "../_posts/2024-05-08-npm-dependency-notation.md"}
{"title": "NPM Dependency Notation", "heading": "2. Caret (^) Notation (\u201c^4.19.2\u201d): (sliding 1)", "chunk": "**Notation:** \u201c^4.19.2\u201d\n\n**Meaning:** Install any compatible version according to semver rules, meaning any version >=4.19.2 and <5.0.0. **Effect on npm install:**\n\n- With ^, npm allows updates to the minor and patch versions, but not the major version. This means if a newer patch version (like 4.19.3) or minor version (like 4.20.0) is available, npm will install it. If an update is installed, the package-lock.json will be updated to reflect the new version. Example: If 4.20.1 is available, npm install will update package-lock.json to install 4.20.1.", "tags": ["code", "npm", "nodejs"], "category": "", "path": "../_posts/2024-05-08-npm-dependency-notation.md"}
{"title": "NPM Dependency Notation", "heading": "3. Tilde (~) Notation (\u201c~4.19.2\u201d): (sliding 1)", "chunk": "**Notation:** \u201c~4.19.2\u201d\n\n**Meaning:** Install the most recent patch version that matches the specified minor version, meaning any version >=4.19.2 and <4.20.0. **Effect on npm install:**\n\n- With ~, npm will allow updates to the patch version but not the minor version. If a newer patch version is available (e.g., 4.19.3), npm will install it, and the package-lock.json will be updated. Example: If version 4.19.5 is available, npm will install that, but it will not install version 4.20.0.", "tags": ["code", "npm", "nodejs"], "category": "", "path": "../_posts/2024-05-08-npm-dependency-notation.md"}
{"title": "NPM Dependency Notation", "heading": "4. Major Version (\u201c4.19\u201d): (sliding 1)", "chunk": "**Notation:** \u201c4.19\u201d\n\n**Meaning:** This implies \u201c4.19.x\u201d, which means install the latest available patch version within the 4.19.x range. **Effect on npm install:**\n\n- This is similar to using ~4.19.0 but more permissive. It allows updates within the minor version and to any patch version (e.g., 4.19.2 \u2192 4.19.5). Example: If version 4.19.3 or 4.19.5 is available, npm will install it and update package-lock.json.", "tags": ["code", "npm", "nodejs"], "category": "", "path": "../_posts/2024-05-08-npm-dependency-notation.md"}
{"title": "NPM Dependency Notation", "heading": "Impact on npm install and package-lock.json: (sliding 1)", "chunk": "**Exact version** (\u201c4.19.2\u201d): No updates will occur unless you change the version manually in package.json. **Caret** (^4.19.2) or Major version (\u201c4.19\u201d): Newer patch or minor versions will be installed automatically, and this will update package-lock.json with the exact version. **Tilde** (~4.19.2): Only patch updates are allowed, and package-lock.json will reflect those updates when they occur.", "tags": ["code", "npm", "nodejs"], "category": "", "path": "../_posts/2024-05-08-npm-dependency-notation.md"}
{"title": "NPM Dependency Notation", "heading": "How This Affects npm install: (sliding 1)", "chunk": "If you use npm install (as opposed to npm ci), and the notation in your package.json allows for updates (like ^4.19.2), npm may install a newer version within the range, and as a result, the package-lock.json file will be updated with this new version. On the other hand, if the package-lock.json specifies a version (say 4.19.2), and your package.json allows updates (^4.19.2), running npm install could still install a newer version (like 4.19.3), which would then update the lock file. This flexibility is a double-edged sword: it allows for automatic updates of patches and minor versions, but if not managed well, it can lead to differences in installed versions across environments, which is why many teams prefer using npm ci in CI/CD pipelines for consistency.", "tags": ["code", "npm", "nodejs"], "category": "", "path": "../_posts/2024-05-08-npm-dependency-notation.md"}
{"title": "Welcome to Jekyll!", "heading": "Introduction (sliding 1)", "chunk": "You'll find this post in your `_posts` directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run `jekyll serve`, which launches a web server and auto-regenerates your site when a file is updated. To add new posts, simply add a file in the `_posts` directory that follows the convention `YYYY-MM-DD-name-of-post.ext` and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works. Jekyll also offers powerful support for code snippets:\n\n```ruby\ndef print_hi(name)\n puts \"Hi, #{name}\"\nend\nprint_hi('Tom')\n#=> prints 'Hi, Tom' to STDOUT. ```\n\nCheck out the [Jekyll docs][jekyll-docs] for more info on how to get the most out of Jekyll. File all bugs/feature requests at [Jekyll\u2019s GitHub repo][jekyll-gh]. If you have questions, you can ask them on [Jekyll Talk][jekyll-talk]. [jekyll-docs]: https://jekyllrb.com/docs/home\n[jekyll-gh]: https://github.com/jekyll/jekyll\n[jekyll-talk]: https://talk.jekyllrb.com/", "tags": ["Jekyll", "update"], "category": "", "path": "../_posts/__2019-04-18-welcome-to-jekyll.md"}
{"title": "From Adding Machines to Ambiguity: Why AI Feels So Different", "heading": "RAG Systems: Compound Error is Built In (sliding 1)", "chunk": "We\u2019ve spent decades with computers that behave like\u2026 well, computers. Write a program to add two numbers together? You\u2019ll get the same answer every time. Query a database with the same input? Same output. These systems are stable, predictable, and rule-bound \u2014 they follow instructions exactly. That\u2019s the model many of us still carry in our heads: computers are logic machines. If something goes wrong, it's because a rule was broken or a bug slipped in. But fundamentally, computers are \"right.\" **But now we\u2019re in a new era. **\n\nWhen working with GenAI systems \u2014 things like ChatGPT, image generators, or document summarizers \u2014 the mental model has to shift. These systems don't just run code \u2014 they interpret, guess, approximate, and vary. They don\u2019t always return the same result. Even asking the same question twice can yield a different answer. It\u2019s like moving from a calculator to a conversation partner. And conversations, as we all know, are fuzzy.", "tags": ["Development"], "category": "", "path": "../_posts/2025-04-10-from_adding_machines_to_ambiguity.md"}
{"title": "From Adding Machines to Ambiguity: Why AI Feels So Different", "heading": "RAG Systems: Compound Error is Built In (sliding 2)", "chunk": "If something goes wrong, it's because a rule was broken or a bug slipped in. But fundamentally, computers are \"right.\" **But now we\u2019re in a new era. **\n\nWhen working with GenAI systems \u2014 things like ChatGPT, image generators, or document summarizers \u2014 the mental model has to shift. These systems don't just run code \u2014 they interpret, guess, approximate, and vary. They don\u2019t always return the same result. Even asking the same question twice can yield a different answer. It\u2019s like moving from a calculator to a conversation partner. And conversations, as we all know, are fuzzy. Behind the scenes, there are layers and layers of work just to try to get a useful result:\n\n- Scanning and cleaning up data\n- Chunking it into manageable bits\n- Turning it into tokens\n- Storing and indexing it\n- Ranking results by \u201crelevance\u201d\n- Writing the right kind of query\n- Picking a model\n- Refining the users questions\n- Handling _randomness_\n\nOh, and hoping your query wasn\u2019t derailed by a stray comma or poor weather (seriously, some cloud services do have regional hiccups)\n\nEach layer introduces a chance for error, drift, or misunderstanding. In physical engineering, we\u2019d call this compound error \u2014 small inaccuracies that stack up until the final outcome is off by more than expected. **So how do we test this?", "tags": ["Development"], "category": "", "path": "../_posts/2025-04-10-from_adding_machines_to_ambiguity.md"}
{"title": "From Adding Machines to Ambiguity: Why AI Feels So Different", "heading": "RAG Systems: Compound Error is Built In (sliding 3)", "chunk": "They don\u2019t always return the same result. Even asking the same question twice can yield a different answer. It\u2019s like moving from a calculator to a conversation partner. And conversations, as we all know, are fuzzy. Behind the scenes, there are layers and layers of work just to try to get a useful result:\n\n- Scanning and cleaning up data\n- Chunking it into manageable bits\n- Turning it into tokens\n- Storing and indexing it\n- Ranking results by \u201crelevance\u201d\n- Writing the right kind of query\n- Picking a model\n- Refining the users questions\n- Handling _randomness_\n\nOh, and hoping your query wasn\u2019t derailed by a stray comma or poor weather (seriously, some cloud services do have regional hiccups)\n\nEach layer introduces a chance for error, drift, or misunderstanding. In physical engineering, we\u2019d call this compound error \u2014 small inaccuracies that stack up until the final outcome is off by more than expected. **So how do we test this? **\nHow do we build trust in a system where the same input might not return the same result? Honestly \u2014 that\u2019s part of the challenge. Some answers:\n\n- You test at the edges, not just the middle. - You check reasonableness, not exactness. - You focus on usefulness, not precision. And maybe most importantly, you get comfortable with uncertainty.", "tags": ["Development"], "category": "", "path": "../_posts/2025-04-10-from_adding_machines_to_ambiguity.md"}
{"title": "From Adding Machines to Ambiguity: Why AI Feels So Different", "heading": "RAG Systems: Compound Error is Built In (sliding 4)", "chunk": "In physical engineering, we\u2019d call this compound error \u2014 small inaccuracies that stack up until the final outcome is off by more than expected. **So how do we test this? **\nHow do we build trust in a system where the same input might not return the same result? Honestly \u2014 that\u2019s part of the challenge. Some answers:\n\n- You test at the edges, not just the middle. - You check reasonableness, not exactness. - You focus on usefulness, not precision. And maybe most importantly, you get comfortable with uncertainty. It\u2019s a mindset shift \u2014 not just in how we build these systems, but how we think about them. They\u2019re not adding machines any more. They\u2019re more like weather forecasts: messy, dynamic, sometimes wrong\u2026 but when used well, incredibly useful.", "tags": ["Development"], "category": "", "path": "../_posts/2025-04-10-from_adding_machines_to_ambiguity.md"}
{"title": "Build what users want", "heading": "Top 6 tactics to successful software in users hands (sliding 1)", "chunk": "- Build what users want\n\n- Use small teams\n\n- Get feedback quickly and take small steps\n\n- Do not sacrifice quality for features\n\n- Automate your testing both big and small tests\n\n- Team autonomy to self organise", "tags": ["Development"], "category": "", "path": "../_posts/2024-05-18-build-what-users-want.md"}
{"title": "Stand ups", "heading": "Introduction (sliding 1)", "chunk": "Keeping focus on value\n\nThis is based on an excellent [article]", "tags": ["Development", "agile", "process"], "category": "", "path": "../_posts/2025-03-12-stand-ups.md"}
{"title": "Stand ups", "heading": "Walk-the-Board stand-up\\* (sliding 1)", "chunk": "**00:00** The team joins the call. **00:00** Facilitator: \u201cGood morning, everyone! Let\u2019s walk the board. Remember to keep updates concise and focus on blockers or anything that needs team input. XXX hasn\u2019t joined yet, but let\u2019s begin \u2014 I hope he\u2019ll join soon.\u201d\n\n**00:01** Facilitator: \u201cI see that someone moved Ticket XYZ-123 to the Done column. Great!\u201d 00:01 Facilitator: \u201cLet\u2019s start with the In Progress column.\u201d\n\n**00:02** Facilitator: \u201cTicket XYZ-456\u201d Developer 1: \u201cI\u2019m making good progress. No issues. No blockers.\u201d\n\n**00:03** Facilitator: \u201cTicket DEF-789\u201d Developer 3: \u201cI\u2019ve started this bug, but I\u2019m stuck on the API integration. XXX, you worked on something similar recently \u2014 can we discuss it after the call?\u201d Developer 1: \u201cSure, I\u2019ll help you after the stand-up.\u201d\n\n**00:04** Facilitator: \u201cTicket ABC-123\u201d Developer 2: \u201cI\u2019m making good progress. No issues. No blockers.\u201d\n\n**00:05** Facilitator: \u201cTicket GHI-101: Bug fix (flagged as blocked).\u201d Dev 4: \u201cThis is still blocked because I\u2019m waiting for the infrastructure team to answer my question.", "tags": ["Development", "agile", "process"], "category": "", "path": "../_posts/2025-03-12-stand-ups.md"}
{"title": "Stand ups", "heading": "Walk-the-Board stand-up\\* (sliding 2)", "chunk": "Great!\u201d 00:01 Facilitator: \u201cLet\u2019s start with the In Progress column.\u201d\n\n**00:02** Facilitator: \u201cTicket XYZ-456\u201d Developer 1: \u201cI\u2019m making good progress. No issues. No blockers.\u201d\n\n**00:03** Facilitator: \u201cTicket DEF-789\u201d Developer 3: \u201cI\u2019ve started this bug, but I\u2019m stuck on the API integration. XXX, you worked on something similar recently \u2014 can we discuss it after the call?\u201d Developer 1: \u201cSure, I\u2019ll help you after the stand-up.\u201d\n\n**00:04** Facilitator: \u201cTicket ABC-123\u201d Developer 2: \u201cI\u2019m making good progress. No issues. No blockers.\u201d\n\n**00:05** Facilitator: \u201cTicket GHI-101: Bug fix (flagged as blocked).\u201d Dev 4: \u201cThis is still blocked because I\u2019m waiting for the infrastructure team to answer my question. I pinged them yesterday, and I\u2019ll follow up again this morning.\u201d Facilitator: \u201cIf you don\u2019t hear back by noon, let\u2019s escalate it.\u201d\n\n**00:05** Facilitator: \u201cTo Do Column: Ticket JKL-202. This ticket is next up. Any concerns before someone picks it up?\u201d Dev 2: \u201cNone from me.", "tags": ["Development", "agile", "process"], "category": "", "path": "../_posts/2025-03-12-stand-ups.md"}
{"title": "Stand ups", "heading": "Walk-the-Board stand-up\\* (sliding 3)", "chunk": "XXX, you worked on something similar recently \u2014 can we discuss it after the call?\u201d Developer 1: \u201cSure, I\u2019ll help you after the stand-up.\u201d\n\n**00:04** Facilitator: \u201cTicket ABC-123\u201d Developer 2: \u201cI\u2019m making good progress. No issues. No blockers.\u201d\n\n**00:05** Facilitator: \u201cTicket GHI-101: Bug fix (flagged as blocked).\u201d Dev 4: \u201cThis is still blocked because I\u2019m waiting for the infrastructure team to answer my question. I pinged them yesterday, and I\u2019ll follow up again this morning.\u201d Facilitator: \u201cIf you don\u2019t hear back by noon, let\u2019s escalate it.\u201d\n\n**00:05** Facilitator: \u201cTo Do Column: Ticket JKL-202. This ticket is next up. Any concerns before someone picks it up?\u201d Dev 2: \u201cNone from me. I\u2019ll take this after finishing ABC-123.\u201d Facilitator: \u201cSounds good.\u201d\n\n**00:06** Wrap-Up Facilitator: \u201cThat\u2019s everything on the board. Let\u2019s stay on for a few minutes to discuss the API issue. Anything else?\u201d Team: Silence. Facilitator: \u201cAlright, let\u2019s get to work!\u201d", "tags": ["Development", "agile", "process"], "category": "", "path": "../_posts/2025-03-12-stand-ups.md"}
{"title": "Stand ups", "heading": "Fight the blockers (sliding 1)", "chunk": "The goal is to improve the flow. Anything that stops work being delivered should be fixed quickly and it make no sense to keep them\\*\n\nMake it a priority for the whole team to resolve blockers. First, ensure it is crystal clear when a ticket is blocked. 'Flag' as blocked. The flag means that no one can work on the ticket due to various reasons, such as:\n\n- Waiting for a response from another team. - Blocked by a more important ticket. - Blocked by the monolith rollout. - A team member is ill.\n- Blocked by the deployment freeze. - Providing comments on blocked tickets is crucial. The reason for blocking should be clear. Providing comments on blocked tickets is crucial. The reason for blocking should be clear. The team\u2019s board should reflect the real-time status of work items. Encourage team members to keep the status of the ticket updated. If you cannot work on a ticket any more, block it. If the ticket gets unblocked, remove the flag. Having such an agreement saves time on status updates and allows the whole team to see problems and act on them early. During dailies, challenge the blockers and think of creative ways to unblock a ticket. Watch out for the hidden blockers. If a ticket is taking too long to complete, it\u2019s a good candidate for discussion in the daily stand-up or a quick brainstorming session. Track the statistics of blockers and discuss them during retrospectives.", "tags": ["Development", "agile", "process"], "category": "", "path": "../_posts/2025-03-12-stand-ups.md"}
{"title": "Stand ups", "heading": "Fight the blockers (sliding 2)", "chunk": "- Blocked by a more important ticket. - Blocked by the monolith rollout. - A team member is ill.\n- Blocked by the deployment freeze. - Providing comments on blocked tickets is crucial. The reason for blocking should be clear. Providing comments on blocked tickets is crucial. The reason for blocking should be clear. The team\u2019s board should reflect the real-time status of work items. Encourage team members to keep the status of the ticket updated. If you cannot work on a ticket any more, block it. If the ticket gets unblocked, remove the flag. Having such an agreement saves time on status updates and allows the whole team to see problems and act on them early. During dailies, challenge the blockers and think of creative ways to unblock a ticket. Watch out for the hidden blockers. If a ticket is taking too long to complete, it\u2019s a good candidate for discussion in the daily stand-up or a quick brainstorming session. Track the statistics of blockers and discuss them during retrospectives. This can bring useful ideas for future improvements.", "tags": ["Development", "agile", "process"], "category": "", "path": "../_posts/2025-03-12-stand-ups.md"}
{"title": "Stand ups", "heading": "Focus on value versus activities (sliding 1)", "chunk": "I struggle with Agile and Scrum that focus on activity tickets and Product Backlog Items (PBI). These might be broken down into even smaller tickets by the team. This becomes difficult to manage and is a drain on time. So, what\u2019s the fix? Track only value-added tickets. Avoid activity tickets as much as possible. It makes the scope clearer, more transparent, and gives you metrics that actually mean something. First, break down value-added tickets as much as possible by acceptance criteria. If a ticket takes several days to complete, don\u2019t overcomplicate it by breaking it into even smaller activity tasks. Second, ditch the time-boxed tickets. You shouldn\u2019t have a PBI that doesn\u2019t fit the sprint, right? Unfortunately, this happens all the time, and teams end up cloning the same ticket over and over. This messes with your stats and makes it hard to track progress. The solution again? Break the ticket down by acceptance criteria. # Definition of Done (DOD)\n\nDefine what 'done' looks like. A good definition of done (DoD) should assume that any change is ready for production. This aligns well with common sense and makes it easier for everyone to understand the status.", "tags": ["Development", "agile", "process"], "category": "", "path": "../_posts/2025-03-12-stand-ups.md"}
{"title": "Stand ups", "heading": "Finally (sliding 1)", "chunk": "Try walking the board during stand-ups, focusing on clearing blockers, and keeping tickets centered on value. Scrum works best when it\u2019s clear and efficient\u2014not overloaded with complexity. Remember, no single system or piece of advice is one-size-fits-all. If a practice doesn\u2019t work for your team, or if vertical buy-in to agile isn\u2019t consistent, adapt flexibly to what suits your unique situation. Be pragmatic: let the process serve you, not the other way around. \\*_Remember to to pragmatic and not a slave to the process_\n\n[article]: https://medium.com/booking-com-development/quick-steps-for-a-scrum-team-to-improve-the-process-11c0c53b0adc", "tags": ["Development", "agile", "process"], "category": "", "path": "../_posts/2025-03-12-stand-ups.md"}
{"title": "Post: Chat", "heading": "Introduction (sliding 1)", "chunk": "Abbott: Strange as it may seem, they give ball players nowadays very peculiar names. Costello: Funny names? Abbott: Nicknames, nicknames. Now, on the St. Louis team we have Who's on first, What's on second, I Don't Know is on third--\n\nCostello: That's what I want to find out. I want you to tell me the names of the fellows on the St. Louis team. Abbott: I'm telling you. Who's on first, What's on second, I Don't Know is on third--\n\nCostello: You know the fellows' names? Abbott: Yes. Costello: Well, then who's playing first? Abbott: Yes. Costello: I mean the fellow's name on first base. Abbott: Who. Costello: The fellow playin' first base. Abbott: Who. Costello: The guy on first base. Abbott: Who is on first. Costello: Well, what are you askin' me for? Abbott: I'm not asking you--I'm telling you. Who is on first. Costello: I'm asking you--who's on first? Abbott: That's the man's name. Costello: That's who's name? Abbott: Yes. Costello: When you pay off the first baseman every month, who gets the money? Abbott: Every dollar of it.", "tags": ["chat", "Post Formats"], "category": "", "path": "../_posts/__2010-01-08-post-chat.md"}
{"title": "Post: Chat", "heading": "Introduction (sliding 2)", "chunk": "Abbott: I'm telling you. Who's on first, What's on second, I Don't Know is on third--\n\nCostello: You know the fellows' names? Abbott: Yes. Costello: Well, then who's playing first? Abbott: Yes. Costello: I mean the fellow's name on first base. Abbott: Who. Costello: The fellow playin' first base. Abbott: Who. Costello: The guy on first base. Abbott: Who is on first. Costello: Well, what are you askin' me for? Abbott: I'm not asking you--I'm telling you. Who is on first. Costello: I'm asking you--who's on first? Abbott: That's the man's name. Costello: That's who's name? Abbott: Yes. Costello: When you pay off the first baseman every month, who gets the money? Abbott: Every dollar of it. And why not, the man's entitled to it. Costello: Who is? Abbott: Yes. Costello: So who gets it? Abbott: Why shouldn't he? Sometimes his wife comes down and collects it. Costello: Who's wife? Abbott: Yes. After all, the man earns it. Costello: Who does? Abbott: Absolutely.", "tags": ["chat", "Post Formats"], "category": "", "path": "../_posts/__2010-01-08-post-chat.md"}
{"title": "Post: Chat", "heading": "Introduction (sliding 3)", "chunk": "Costello: The fellow playin' first base. Abbott: Who. Costello: The guy on first base. Abbott: Who is on first. Costello: Well, what are you askin' me for? Abbott: I'm not asking you--I'm telling you. Who is on first. Costello: I'm asking you--who's on first? Abbott: That's the man's name. Costello: That's who's name? Abbott: Yes. Costello: When you pay off the first baseman every month, who gets the money? Abbott: Every dollar of it. And why not, the man's entitled to it. Costello: Who is? Abbott: Yes. Costello: So who gets it? Abbott: Why shouldn't he? Sometimes his wife comes down and collects it. Costello: Who's wife? Abbott: Yes. After all, the man earns it. Costello: Who does? Abbott: Absolutely. Costello: Well, all I'm trying to find out is what's the guy's name on first base? Abbott: Oh, no, no. What is on second base. Costello: I'm not asking you who's on second. Abbott: Who's on first! Costello: St. Louis has a good outfield? Abbott: Oh, absolutely. Costello: The left fielder's name? Abbott: Why.", "tags": ["chat", "Post Formats"], "category": "", "path": "../_posts/__2010-01-08-post-chat.md"}
{"title": "Post: Chat", "heading": "Introduction (sliding 4)", "chunk": "Abbott: That's the man's name. Costello: That's who's name? Abbott: Yes. Costello: When you pay off the first baseman every month, who gets the money? Abbott: Every dollar of it. And why not, the man's entitled to it. Costello: Who is? Abbott: Yes. Costello: So who gets it? Abbott: Why shouldn't he? Sometimes his wife comes down and collects it. Costello: Who's wife? Abbott: Yes. After all, the man earns it. Costello: Who does? Abbott: Absolutely. Costello: Well, all I'm trying to find out is what's the guy's name on first base? Abbott: Oh, no, no. What is on second base. Costello: I'm not asking you who's on second. Abbott: Who's on first! Costello: St. Louis has a good outfield? Abbott: Oh, absolutely. Costello: The left fielder's name? Abbott: Why. Costello: I don't know, I just thought I'd ask. Abbott: Well, I just thought I'd tell you. Costello: Then tell me who's playing left field? Abbott: Who's playing first. Costello: Stay out of the infield! The left fielder's name? Abbott: Why. Costello: Because.", "tags": ["chat", "Post Formats"], "category": "", "path": "../_posts/__2010-01-08-post-chat.md"}
{"title": "Post: Chat", "heading": "Introduction (sliding 5)", "chunk": "Abbott: Why shouldn't he? Sometimes his wife comes down and collects it. Costello: Who's wife? Abbott: Yes. After all, the man earns it. Costello: Who does? Abbott: Absolutely. Costello: Well, all I'm trying to find out is what's the guy's name on first base? Abbott: Oh, no, no. What is on second base. Costello: I'm not asking you who's on second. Abbott: Who's on first! Costello: St. Louis has a good outfield? Abbott: Oh, absolutely. Costello: The left fielder's name? Abbott: Why. Costello: I don't know, I just thought I'd ask. Abbott: Well, I just thought I'd tell you. Costello: Then tell me who's playing left field? Abbott: Who's playing first. Costello: Stay out of the infield! The left fielder's name? Abbott: Why. Costello: Because. Abbott: Oh, he's center field. Costello: Wait a minute. You got a pitcher on this team? Abbott: Wouldn't this be a fine team without a pitcher? Costello: Tell me the pitcher's name. Abbott: Tomorrow.", "tags": ["chat", "Post Formats"], "category": "", "path": "../_posts/__2010-01-08-post-chat.md"}
{"title": "Post: Chat", "heading": "Introduction (sliding 6)", "chunk": "What is on second base. Costello: I'm not asking you who's on second. Abbott: Who's on first! Costello: St. Louis has a good outfield? Abbott: Oh, absolutely. Costello: The left fielder's name? Abbott: Why. Costello: I don't know, I just thought I'd ask. Abbott: Well, I just thought I'd tell you. Costello: Then tell me who's playing left field? Abbott: Who's playing first. Costello: Stay out of the infield! The left fielder's name? Abbott: Why. Costello: Because. Abbott: Oh, he's center field. Costello: Wait a minute. You got a pitcher on this team? Abbott: Wouldn't this be a fine team without a pitcher? Costello: Tell me the pitcher's name. Abbott: Tomorrow. Costello: Now, when the guy at bat bunts the ball--me being a good catcher--I want to throw the guy out at first base, so I pick up the ball and throw it to who? Abbott: Now, that's he first thing you've said right. Costello: I DON'T EVEN KNOW WHAT I'M TALKING ABOUT! Abbott: Don't get excited. Take it easy. Costello: I throw the ball to first base, whoever it is grabs the ball, so the guy runs to second.", "tags": ["chat", "Post Formats"], "category": "", "path": "../_posts/__2010-01-08-post-chat.md"}
{"title": "Post: Chat", "heading": "Introduction (sliding 7)", "chunk": "Abbott: Well, I just thought I'd tell you. Costello: Then tell me who's playing left field? Abbott: Who's playing first. Costello: Stay out of the infield! The left fielder's name? Abbott: Why. Costello: Because. Abbott: Oh, he's center field. Costello: Wait a minute. You got a pitcher on this team? Abbott: Wouldn't this be a fine team without a pitcher? Costello: Tell me the pitcher's name. Abbott: Tomorrow. Costello: Now, when the guy at bat bunts the ball--me being a good catcher--I want to throw the guy out at first base, so I pick up the ball and throw it to who? Abbott: Now, that's he first thing you've said right. Costello: I DON'T EVEN KNOW WHAT I'M TALKING ABOUT! Abbott: Don't get excited. Take it easy. Costello: I throw the ball to first base, whoever it is grabs the ball, so the guy runs to second. Who picks up the ball and throws it to what. What throws it to I don't know. I don't know throws it back to tomorrow--a triple play. Abbott: Yeah, it could be. Costello: Another guy gets up and it's a long ball to center. Abbott: Because. Costello: Why? I don't know.", "tags": ["chat", "Post Formats"], "category": "", "path": "../_posts/__2010-01-08-post-chat.md"}
{"title": "Post: Chat", "heading": "Introduction (sliding 8)", "chunk": "You got a pitcher on this team? Abbott: Wouldn't this be a fine team without a pitcher? Costello: Tell me the pitcher's name. Abbott: Tomorrow. Costello: Now, when the guy at bat bunts the ball--me being a good catcher--I want to throw the guy out at first base, so I pick up the ball and throw it to who? Abbott: Now, that's he first thing you've said right. Costello: I DON'T EVEN KNOW WHAT I'M TALKING ABOUT! Abbott: Don't get excited. Take it easy. Costello: I throw the ball to first base, whoever it is grabs the ball, so the guy runs to second. Who picks up the ball and throws it to what. What throws it to I don't know. I don't know throws it back to tomorrow--a triple play. Abbott: Yeah, it could be. Costello: Another guy gets up and it's a long ball to center. Abbott: Because. Costello: Why? I don't know. And I don't care. Abbott: What was that? Costello: I said, I DON'T CARE! Abbott: Oh, that's our shortstop!", "tags": ["chat", "Post Formats"], "category": "", "path": "../_posts/__2010-01-08-post-chat.md"}
